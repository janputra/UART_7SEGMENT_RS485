ARM GAS  /tmp/ccrM433n.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.m_send_to_lcd,"ax",%progbits
  18              		.align	1
  19              		.global	m_send_to_lcd
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	m_send_to_lcd:
  27              	.LVL0:
  28              	.LFB133:
  29              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "tim.h"
  22:Core/Src/main.c **** #include "usart.h"
  23:Core/Src/main.c **** #include "gpio.h"
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  26:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  27:Core/Src/main.c **** #include "lcd16x2.h"
  28:Core/Src/main.c **** #include "message.h"
  29:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /tmp/ccrM433n.s 			page 2


  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE BEGIN PV */
  48:Core/Src/main.c **** uint8_t f_busy;
  49:Core/Src/main.c **** unsigned char f_timer_TX = 0;
  50:Core/Src/main.c **** unsigned char f_seg_timer_500ms;
  51:Core/Src/main.c **** unsigned char f_timer_10ms = 0;
  52:Core/Src/main.c **** unsigned char f_timer_20ms = 0;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** unsigned char f_timer_30ms = 0;
  55:Core/Src/main.c **** unsigned char f_timer_50ms = 0;
  56:Core/Src/main.c **** unsigned char f_querry = 0;
  57:Core/Src/main.c **** unsigned char flag_digit_1 = 1;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** unsigned char tx2_buffer[10] = {"123456789"};
  60:Core/Src/main.c **** unsigned char tx1_buffer[6] = {"abcdef"};
  61:Core/Src/main.c **** unsigned char d_timer_30ms;
  62:Core/Src/main.c **** unsigned char d_timer_50ms;
  63:Core/Src/main.c **** unsigned char d_timer_20ms;
  64:Core/Src/main.c **** unsigned char d_timer_TX1;
  65:Core/Src/main.c **** unsigned char TX1_delay_val = 250;
  66:Core/Src/main.c **** unsigned char d_timer_TX2;
  67:Core/Src/main.c **** unsigned char TX2_delay_val = 250;
  68:Core/Src/main.c **** unsigned char key1_data, key2_data;
  69:Core/Src/main.c **** unsigned char state, event, error;
  70:Core/Src/main.c **** unsigned char num_slave=0;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c **** unsigned char digit1, digit2;
  73:Core/Src/main.c **** // flag for LCD
  74:Core/Src/main.c **** unsigned char is_EN = 0;
  75:Core/Src/main.c **** unsigned char lcd_digit1_f = 0;
  76:Core/Src/main.c **** unsigned char digit1_update = 0;
  77:Core/Src/main.c **** unsigned char digit2_update = 0;
  78:Core/Src/main.c **** unsigned char cmd, data;
  79:Core/Src/main.c **** unsigned char lcd_process = 0;
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** unsigned char digit_table[17] = {"0123456789abcdef-"};
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** uint8_t rx_temp;
  84:Core/Src/main.c **** uint8_t transmission_f;
  85:Core/Src/main.c **** uint8_t start_cmd = 0x2;
  86:Core/Src/main.c **** uint8_t stop_cmd = 0x3;
ARM GAS  /tmp/ccrM433n.s 			page 3


  87:Core/Src/main.c **** circular_buffer rx1_buffer;
  88:Core/Src/main.c **** circular_buffer rx2_buffer;
  89:Core/Src/main.c **** circular_buffer event_buffer;
  90:Core/Src/main.c **** uint8_t ID;
  91:Core/Src/main.c **** uint8_t TX_msg[4];
  92:Core/Src/main.c **** uint8_t RX_msg[4];
  93:Core/Src/main.c **** /* USER CODE END PV */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  96:Core/Src/main.c **** void SystemClock_Config(void);
  97:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  98:Core/Src/main.c **** void task_timer(void);
  99:Core/Src/main.c **** void counting_task(void);
 100:Core/Src/main.c **** void uart_TX2_task(void);
 101:Core/Src/main.c **** void uart_TX1_task(void);
 102:Core/Src/main.c **** void uart_RX1_task(void);
 103:Core/Src/main.c **** void uart_RX2_task(void);
 104:Core/Src/main.c **** void segment_display_task(void);
 105:Core/Src/main.c **** void lcd_display_task(void);
 106:Core/Src/main.c **** void key_read_task(void);
 107:Core/Src/main.c **** void main_task(void);
 108:Core/Src/main.c **** 
 109:Core/Src/main.c **** void seven_segment_driver(char input, char select_digit);
 110:Core/Src/main.c **** void TX1_delay_update(void);
 111:Core/Src/main.c **** void TX2_delay_update(void);
 112:Core/Src/main.c **** void m_send_to_lcd(char data);
 113:Core/Src/main.c **** void Set_Transmitter_Port1(void);
 114:Core/Src/main.c **** void Set_Transmitter_Port2(void);
 115:Core/Src/main.c **** void Set_Receiver_Port1(void);
 116:Core/Src/main.c **** void Set_Receiver_Port2(void);
 117:Core/Src/main.c **** void RS485_Send_Message(uint8_t address, uint8_t func_code, uint8_t data);
 118:Core/Src/main.c **** void RS485_Read_Message(void);
 119:Core/Src/main.c **** /*
 120:Core/Src/main.c **** unsigned char m_send_to_lcd(char data);
 121:Core/Src/main.c **** unsigned char m_lcd_cmd(char cmd);
 122:Core/Src/main.c **** unsigned char m_lcd_data(char cmd);
 123:Core/Src/main.c **** unsigned char m_lcd_set_pos(int row, int col);
 124:Core/Src/main.c **** */
 125:Core/Src/main.c **** /* USER CODE END PFP */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 128:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c **** /* USER CODE END 0 */
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** /**
 133:Core/Src/main.c ****  * @brief  The application entry point.
 134:Core/Src/main.c ****  * @retval int
 135:Core/Src/main.c ****  */
 136:Core/Src/main.c **** int main(void)
 137:Core/Src/main.c **** {
 138:Core/Src/main.c **** 	/* USER CODE BEGIN 1 */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c **** 	/* USER CODE END 1 */
 141:Core/Src/main.c **** 
 142:Core/Src/main.c **** 	/* MCU Configuration--------------------------------------------------------*/
 143:Core/Src/main.c **** 
ARM GAS  /tmp/ccrM433n.s 			page 4


 144:Core/Src/main.c **** 	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 145:Core/Src/main.c **** 	HAL_Init();
 146:Core/Src/main.c **** 
 147:Core/Src/main.c **** 	/* USER CODE BEGIN Init */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c **** 	/* USER CODE END Init */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** 	/* Configure the system clock */
 152:Core/Src/main.c **** 	SystemClock_Config();
 153:Core/Src/main.c **** 
 154:Core/Src/main.c **** 	/* USER CODE BEGIN SysInit */
 155:Core/Src/main.c **** 
 156:Core/Src/main.c **** 	/* USER CODE END SysInit */
 157:Core/Src/main.c **** 
 158:Core/Src/main.c **** 	/* Initialize all configured peripherals */
 159:Core/Src/main.c **** 	MX_GPIO_Init();
 160:Core/Src/main.c **** 	MX_TIM4_Init();
 161:Core/Src/main.c **** 	MX_UART4_Init();
 162:Core/Src/main.c **** 	MX_UART5_Init();
 163:Core/Src/main.c **** 	/* USER CODE BEGIN 2 */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c **** 	HAL_TIM_Base_Start_IT(&htim4);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c **** 	HAL_GPIO_WritePin(TX1_EN_GPIO_Port, TX1_EN_Pin, 0); // Enable Receiver 1
 168:Core/Src/main.c **** 	// HAL_GPIO_WritePin(TX2_EN_GPIO_Port, TX2_EN_Pin, 0);	// Enable Receiver 2
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** 	HAL_UART_Receive_IT(&huart4, &rx_temp, 1);
 171:Core/Src/main.c **** 	// HAL_UART_Receive_IT(&huart5, &rx2_buffer.data[rx2_buffer.head], 1);
 172:Core/Src/main.c **** 
 173:Core/Src/main.c **** 	digit1 = 16;
 174:Core/Src/main.c **** 	digit2 = 16;
 175:Core/Src/main.c **** 	num_slave=0;
 176:Core/Src/main.c **** 	if (num_slave>0){
 177:Core/Src/main.c **** 		state = STATE_OPERATION;
 178:Core/Src/main.c **** 	}
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** 	lcd_init();
 181:Core/Src/main.c **** 	lcd_clear();
 182:Core/Src/main.c **** 	lcd_set_pos(0, 3);
 183:Core/Src/main.c **** 	lcd_write_string("TETRADYNE");
 184:Core/Src/main.c **** 	lcd_set_pos(1, 0);
 185:Core/Src/main.c **** 	lcd_write_string("S2:");
 186:Core/Src/main.c **** 	lcd_set_pos(1, 0xC);
 187:Core/Src/main.c **** 	lcd_write_string("S1:");
 188:Core/Src/main.c **** 	/* USER CODE END 2 */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c **** 	/* Infinite loop */
 191:Core/Src/main.c **** 	/* USER CODE BEGIN WHILE */
 192:Core/Src/main.c **** 	while (1)
 193:Core/Src/main.c **** 	{
 194:Core/Src/main.c **** 		/* USER CODE END WHILE */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c **** 		/* USER CODE BEGIN 3 */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c **** 		task_timer();
 199:Core/Src/main.c **** 		/// segment_display_task();
 200:Core/Src/main.c **** 		lcd_display_task();
ARM GAS  /tmp/ccrM433n.s 			page 5


 201:Core/Src/main.c **** 		key_read_task();
 202:Core/Src/main.c **** 
 203:Core/Src/main.c **** 		main_task();
 204:Core/Src/main.c **** 	}
 205:Core/Src/main.c **** 	/* USER CODE END 3 */
 206:Core/Src/main.c **** }
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** /**
 209:Core/Src/main.c ****  * @brief System Clock Configuration
 210:Core/Src/main.c ****  * @retval None
 211:Core/Src/main.c ****  */
 212:Core/Src/main.c **** void SystemClock_Config(void)
 213:Core/Src/main.c **** {
 214:Core/Src/main.c **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 215:Core/Src/main.c **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 216:Core/Src/main.c **** 
 217:Core/Src/main.c **** 	/** Configure the main internal regulator output voltage
 218:Core/Src/main.c **** 	 */
 219:Core/Src/main.c **** 	__HAL_RCC_PWR_CLK_ENABLE();
 220:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** 	/** Initializes the RCC Oscillators according to the specified parameters
 223:Core/Src/main.c **** 	 * in the RCC_OscInitTypeDef structure.
 224:Core/Src/main.c **** 	 */
 225:Core/Src/main.c **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 226:Core/Src/main.c **** 	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 227:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 228:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 229:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLM = 4;
 230:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLN = 96;
 231:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 232:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLQ = 3;
 233:Core/Src/main.c **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 234:Core/Src/main.c **** 	{
 235:Core/Src/main.c **** 		Error_Handler();
 236:Core/Src/main.c **** 	}
 237:Core/Src/main.c **** 
 238:Core/Src/main.c **** 	/** Initializes the CPU, AHB and APB buses clocks
 239:Core/Src/main.c **** 	 */
 240:Core/Src/main.c **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RC
 241:Core/Src/main.c **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 242:Core/Src/main.c **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 243:Core/Src/main.c **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 244:Core/Src/main.c **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 245:Core/Src/main.c **** 
 246:Core/Src/main.c **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 247:Core/Src/main.c **** 	{
 248:Core/Src/main.c **** 		Error_Handler();
 249:Core/Src/main.c **** 	}
 250:Core/Src/main.c **** }
 251:Core/Src/main.c **** 
 252:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** void lcd_display_task(void)
 255:Core/Src/main.c **** {
 256:Core/Src/main.c **** 
 257:Core/Src/main.c **** 	if (!lcd_digit1_f)
ARM GAS  /tmp/ccrM433n.s 			page 6


 258:Core/Src/main.c **** 	{
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** 		cmd = 0xC3;
 261:Core/Src/main.c **** 		data = digit_table[digit2];
 262:Core/Src/main.c **** 	}
 263:Core/Src/main.c **** 	else
 264:Core/Src/main.c **** 	{
 265:Core/Src/main.c **** 
 266:Core/Src/main.c **** 		cmd = 0xCF;
 267:Core/Src/main.c **** 		data = digit_table[digit1];
 268:Core/Src/main.c **** 	}
 269:Core/Src/main.c **** 	switch (lcd_process)
 270:Core/Src/main.c **** 	{
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** 	case 0:
 273:Core/Src/main.c **** 		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 274:Core/Src/main.c **** 		m_send_to_lcd((cmd >> 4) & 0x0f);
 275:Core/Src/main.c **** 		break;
 276:Core/Src/main.c **** 	case 1:
 277:Core/Src/main.c **** 		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 0);
 278:Core/Src/main.c **** 		m_send_to_lcd((cmd)&0x0f);
 279:Core/Src/main.c **** 		break;
 280:Core/Src/main.c **** 	case 2:
 281:Core/Src/main.c **** 		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 1);
 282:Core/Src/main.c **** 		m_send_to_lcd((data >> 4) & 0x0f);
 283:Core/Src/main.c **** 		break;
 284:Core/Src/main.c **** 	case 3:
 285:Core/Src/main.c **** 		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, 1);
 286:Core/Src/main.c **** 		m_send_to_lcd(data & 0x0f);
 287:Core/Src/main.c **** 		break;
 288:Core/Src/main.c **** 	}
 289:Core/Src/main.c **** }
 290:Core/Src/main.c **** 
 291:Core/Src/main.c **** void m_send_to_lcd(char data)
 292:Core/Src/main.c **** {
  30              		.loc 1 292 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 292 1 is_stmt 0 view .LVU1
  35 0000 08B5     		push	{r3, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 3, -8
  39              		.cfi_offset 14, -4
 293:Core/Src/main.c **** 
 294:Core/Src/main.c **** 	// writing data to pin PE0~PE3
 295:Core/Src/main.c **** 	GPIOE->ODR = (GPIOE->ODR & 0xFFFFFFF0) | data;
  40              		.loc 1 295 2 is_stmt 1 view .LVU2
  41              		.loc 1 295 21 is_stmt 0 view .LVU3
  42 0002 194A     		ldr	r2, .L5
  43 0004 5369     		ldr	r3, [r2, #20]
  44              		.loc 1 295 27 view .LVU4
  45 0006 23F00F03 		bic	r3, r3, #15
  46              		.loc 1 295 41 view .LVU5
  47 000a 1843     		orrs	r0, r0, r3
  48              	.LVL1:
ARM GAS  /tmp/ccrM433n.s 			page 7


  49              		.loc 1 295 13 view .LVU6
  50 000c 5061     		str	r0, [r2, #20]
 296:Core/Src/main.c **** 
 297:Core/Src/main.c **** 	if (!f_timer_20ms)
  51              		.loc 1 297 2 is_stmt 1 view .LVU7
  52              		.loc 1 297 6 is_stmt 0 view .LVU8
  53 000e 174B     		ldr	r3, .L5+4
  54 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  55              		.loc 1 297 5 view .LVU9
  56 0012 6BB1     		cbz	r3, .L1
 298:Core/Src/main.c **** 		return;
 299:Core/Src/main.c **** 	f_timer_20ms = 0;
  57              		.loc 1 299 2 is_stmt 1 view .LVU10
  58              		.loc 1 299 15 is_stmt 0 view .LVU11
  59 0014 154B     		ldr	r3, .L5+4
  60 0016 0022     		movs	r2, #0
  61 0018 1A70     		strb	r2, [r3]
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** 	if (!is_EN)
  62              		.loc 1 301 2 is_stmt 1 view .LVU12
  63              		.loc 1 301 6 is_stmt 0 view .LVU13
  64 001a 154B     		ldr	r3, .L5+8
  65 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  66              		.loc 1 301 5 view .LVU14
  67 001e 43B9     		cbnz	r3, .L3
 302:Core/Src/main.c **** 	{
 303:Core/Src/main.c **** 		HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
  68              		.loc 1 303 3 is_stmt 1 view .LVU15
  69 0020 0122     		movs	r2, #1
  70 0022 2021     		movs	r1, #32
  71 0024 1048     		ldr	r0, .L5
  72 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
  73              	.LVL2:
 304:Core/Src/main.c **** 		is_EN = 1;
  74              		.loc 1 304 3 view .LVU16
  75              		.loc 1 304 9 is_stmt 0 view .LVU17
  76 002a 114B     		ldr	r3, .L5+8
  77 002c 0122     		movs	r2, #1
  78 002e 1A70     		strb	r2, [r3]
  79              	.L1:
 305:Core/Src/main.c **** 	}
 306:Core/Src/main.c **** 	else
 307:Core/Src/main.c **** 	{
 308:Core/Src/main.c **** 
 309:Core/Src/main.c **** 		HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 310:Core/Src/main.c **** 		is_EN = 0;
 311:Core/Src/main.c **** 		lcd_process++;
 312:Core/Src/main.c **** 		if (lcd_process > 3)
 313:Core/Src/main.c **** 		{
 314:Core/Src/main.c **** 			lcd_process = 0;
 315:Core/Src/main.c **** 			lcd_digit1_f = (~lcd_digit1_f) & 0x1;
 316:Core/Src/main.c **** 		}
 317:Core/Src/main.c **** 	}
 318:Core/Src/main.c **** }
  80              		.loc 1 318 1 view .LVU18
  81 0030 08BD     		pop	{r3, pc}
  82              	.L3:
ARM GAS  /tmp/ccrM433n.s 			page 8


 309:Core/Src/main.c **** 		is_EN = 0;
  83              		.loc 1 309 3 is_stmt 1 view .LVU19
  84 0032 0022     		movs	r2, #0
  85 0034 2021     		movs	r1, #32
  86 0036 0C48     		ldr	r0, .L5
  87 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
  88              	.LVL3:
 310:Core/Src/main.c **** 		lcd_process++;
  89              		.loc 1 310 3 view .LVU20
 310:Core/Src/main.c **** 		lcd_process++;
  90              		.loc 1 310 9 is_stmt 0 view .LVU21
  91 003c 0C4B     		ldr	r3, .L5+8
  92 003e 0022     		movs	r2, #0
  93 0040 1A70     		strb	r2, [r3]
 311:Core/Src/main.c **** 		if (lcd_process > 3)
  94              		.loc 1 311 3 is_stmt 1 view .LVU22
 311:Core/Src/main.c **** 		if (lcd_process > 3)
  95              		.loc 1 311 14 is_stmt 0 view .LVU23
  96 0042 0C4A     		ldr	r2, .L5+12
  97 0044 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  98 0046 0133     		adds	r3, r3, #1
  99 0048 DBB2     		uxtb	r3, r3
 100 004a 1370     		strb	r3, [r2]
 312:Core/Src/main.c **** 		{
 101              		.loc 1 312 3 is_stmt 1 view .LVU24
 312:Core/Src/main.c **** 		{
 102              		.loc 1 312 6 is_stmt 0 view .LVU25
 103 004c 032B     		cmp	r3, #3
 104 004e EFD9     		bls	.L1
 314:Core/Src/main.c **** 			lcd_digit1_f = (~lcd_digit1_f) & 0x1;
 105              		.loc 1 314 4 is_stmt 1 view .LVU26
 314:Core/Src/main.c **** 			lcd_digit1_f = (~lcd_digit1_f) & 0x1;
 106              		.loc 1 314 16 is_stmt 0 view .LVU27
 107 0050 1346     		mov	r3, r2
 108 0052 0022     		movs	r2, #0
 109 0054 1A70     		strb	r2, [r3]
 315:Core/Src/main.c **** 		}
 110              		.loc 1 315 4 is_stmt 1 view .LVU28
 315:Core/Src/main.c **** 		}
 111              		.loc 1 315 35 is_stmt 0 view .LVU29
 112 0056 084A     		ldr	r2, .L5+16
 113 0058 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 114 005a 83F00103 		eor	r3, r3, #1
 115 005e 03F00103 		and	r3, r3, #1
 315:Core/Src/main.c **** 		}
 116              		.loc 1 315 17 view .LVU30
 117 0062 1370     		strb	r3, [r2]
 118 0064 E4E7     		b	.L1
 119              	.L6:
 120 0066 00BF     		.align	2
 121              	.L5:
 122 0068 00100240 		.word	1073876992
 123 006c 00000000 		.word	.LANCHOR0
 124 0070 00000000 		.word	.LANCHOR1
 125 0074 00000000 		.word	.LANCHOR2
 126 0078 00000000 		.word	.LANCHOR3
 127              		.cfi_endproc
ARM GAS  /tmp/ccrM433n.s 			page 9


 128              	.LFE133:
 130              		.section	.text.lcd_display_task,"ax",%progbits
 131              		.align	1
 132              		.global	lcd_display_task
 133              		.syntax unified
 134              		.thumb
 135              		.thumb_func
 136              		.fpu fpv4-sp-d16
 138              	lcd_display_task:
 139              	.LFB132:
 255:Core/Src/main.c **** 
 140              		.loc 1 255 1 is_stmt 1 view -0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144 0000 08B5     		push	{r3, lr}
 145              	.LCFI1:
 146              		.cfi_def_cfa_offset 8
 147              		.cfi_offset 3, -8
 148              		.cfi_offset 14, -4
 257:Core/Src/main.c **** 	{
 149              		.loc 1 257 2 view .LVU32
 257:Core/Src/main.c **** 	{
 150              		.loc 1 257 6 is_stmt 0 view .LVU33
 151 0002 264B     		ldr	r3, .L17
 152 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 257:Core/Src/main.c **** 	{
 153              		.loc 1 257 5 view .LVU34
 154 0006 83B9     		cbnz	r3, .L8
 260:Core/Src/main.c **** 		data = digit_table[digit2];
 155              		.loc 1 260 3 is_stmt 1 view .LVU35
 260:Core/Src/main.c **** 		data = digit_table[digit2];
 156              		.loc 1 260 7 is_stmt 0 view .LVU36
 157 0008 254B     		ldr	r3, .L17+4
 158 000a C322     		movs	r2, #195
 159 000c 1A70     		strb	r2, [r3]
 261:Core/Src/main.c **** 	}
 160              		.loc 1 261 3 is_stmt 1 view .LVU37
 261:Core/Src/main.c **** 	}
 161              		.loc 1 261 21 is_stmt 0 view .LVU38
 162 000e 254B     		ldr	r3, .L17+8
 163 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 164 0012 254A     		ldr	r2, .L17+12
 165 0014 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 261:Core/Src/main.c **** 	}
 166              		.loc 1 261 8 view .LVU39
 167 0016 254B     		ldr	r3, .L17+16
 168 0018 1A70     		strb	r2, [r3]
 169              	.L9:
 269:Core/Src/main.c **** 	{
 170              		.loc 1 269 2 is_stmt 1 view .LVU40
 171 001a 254B     		ldr	r3, .L17+20
 172 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 173 001e 032B     		cmp	r3, #3
 174 0020 17D8     		bhi	.L7
 175 0022 DFE803F0 		tbb	[pc, r3]
 176              	.L12:
ARM GAS  /tmp/ccrM433n.s 			page 10


 177 0026 0C       		.byte	(.L15-.L12)/2
 178 0027 17       		.byte	(.L14-.L12)/2
 179 0028 23       		.byte	(.L13-.L12)/2
 180 0029 2E       		.byte	(.L11-.L12)/2
 181              		.p2align 1
 182              	.L8:
 266:Core/Src/main.c **** 		data = digit_table[digit1];
 183              		.loc 1 266 3 view .LVU41
 266:Core/Src/main.c **** 		data = digit_table[digit1];
 184              		.loc 1 266 7 is_stmt 0 view .LVU42
 185 002a 1D4B     		ldr	r3, .L17+4
 186 002c CF22     		movs	r2, #207
 187 002e 1A70     		strb	r2, [r3]
 267:Core/Src/main.c **** 	}
 188              		.loc 1 267 3 is_stmt 1 view .LVU43
 267:Core/Src/main.c **** 	}
 189              		.loc 1 267 21 is_stmt 0 view .LVU44
 190 0030 204B     		ldr	r3, .L17+24
 191 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 192 0034 1C4A     		ldr	r2, .L17+12
 193 0036 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 267:Core/Src/main.c **** 	}
 194              		.loc 1 267 8 view .LVU45
 195 0038 1C4B     		ldr	r3, .L17+16
 196 003a 1A70     		strb	r2, [r3]
 197 003c EDE7     		b	.L9
 198              	.L15:
 273:Core/Src/main.c **** 		m_send_to_lcd((cmd >> 4) & 0x0f);
 199              		.loc 1 273 3 is_stmt 1 view .LVU46
 200 003e 0022     		movs	r2, #0
 201 0040 1021     		movs	r1, #16
 202 0042 1D48     		ldr	r0, .L17+28
 203 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
 204              	.LVL4:
 274:Core/Src/main.c **** 		break;
 205              		.loc 1 274 3 view .LVU47
 206 0048 154B     		ldr	r3, .L17+4
 207 004a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 208 004c 0009     		lsrs	r0, r0, #4
 209 004e FFF7FEFF 		bl	m_send_to_lcd
 210              	.LVL5:
 275:Core/Src/main.c **** 	case 1:
 211              		.loc 1 275 3 view .LVU48
 212              	.L7:
 289:Core/Src/main.c **** 
 213              		.loc 1 289 1 is_stmt 0 view .LVU49
 214 0052 08BD     		pop	{r3, pc}
 215              	.L14:
 277:Core/Src/main.c **** 		m_send_to_lcd((cmd)&0x0f);
 216              		.loc 1 277 3 is_stmt 1 view .LVU50
 217 0054 0022     		movs	r2, #0
 218 0056 1021     		movs	r1, #16
 219 0058 1748     		ldr	r0, .L17+28
 220 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 221              	.LVL6:
 278:Core/Src/main.c **** 		break;
 222              		.loc 1 278 3 view .LVU51
ARM GAS  /tmp/ccrM433n.s 			page 11


 278:Core/Src/main.c **** 		break;
 223              		.loc 1 278 22 is_stmt 0 view .LVU52
 224 005e 104B     		ldr	r3, .L17+4
 225 0060 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 278:Core/Src/main.c **** 		break;
 226              		.loc 1 278 3 view .LVU53
 227 0062 00F00F00 		and	r0, r0, #15
 228 0066 FFF7FEFF 		bl	m_send_to_lcd
 229              	.LVL7:
 279:Core/Src/main.c **** 	case 2:
 230              		.loc 1 279 3 is_stmt 1 view .LVU54
 231 006a F2E7     		b	.L7
 232              	.L13:
 281:Core/Src/main.c **** 		m_send_to_lcd((data >> 4) & 0x0f);
 233              		.loc 1 281 3 view .LVU55
 234 006c 0122     		movs	r2, #1
 235 006e 1021     		movs	r1, #16
 236 0070 1148     		ldr	r0, .L17+28
 237 0072 FFF7FEFF 		bl	HAL_GPIO_WritePin
 238              	.LVL8:
 282:Core/Src/main.c **** 		break;
 239              		.loc 1 282 3 view .LVU56
 240 0076 0D4B     		ldr	r3, .L17+16
 241 0078 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 242 007a 0009     		lsrs	r0, r0, #4
 243 007c FFF7FEFF 		bl	m_send_to_lcd
 244              	.LVL9:
 283:Core/Src/main.c **** 	case 3:
 245              		.loc 1 283 3 view .LVU57
 246 0080 E7E7     		b	.L7
 247              	.L11:
 285:Core/Src/main.c **** 		m_send_to_lcd(data & 0x0f);
 248              		.loc 1 285 3 view .LVU58
 249 0082 0122     		movs	r2, #1
 250 0084 1021     		movs	r1, #16
 251 0086 0C48     		ldr	r0, .L17+28
 252 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 253              	.LVL10:
 286:Core/Src/main.c **** 		break;
 254              		.loc 1 286 3 view .LVU59
 286:Core/Src/main.c **** 		break;
 255              		.loc 1 286 22 is_stmt 0 view .LVU60
 256 008c 074B     		ldr	r3, .L17+16
 257 008e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 286:Core/Src/main.c **** 		break;
 258              		.loc 1 286 3 view .LVU61
 259 0090 00F00F00 		and	r0, r0, #15
 260 0094 FFF7FEFF 		bl	m_send_to_lcd
 261              	.LVL11:
 287:Core/Src/main.c **** 	}
 262              		.loc 1 287 3 is_stmt 1 view .LVU62
 289:Core/Src/main.c **** 
 263              		.loc 1 289 1 is_stmt 0 view .LVU63
 264 0098 DBE7     		b	.L7
 265              	.L18:
 266 009a 00BF     		.align	2
 267              	.L17:
ARM GAS  /tmp/ccrM433n.s 			page 12


 268 009c 00000000 		.word	.LANCHOR3
 269 00a0 00000000 		.word	.LANCHOR4
 270 00a4 00000000 		.word	.LANCHOR6
 271 00a8 00000000 		.word	.LANCHOR5
 272 00ac 00000000 		.word	.LANCHOR7
 273 00b0 00000000 		.word	.LANCHOR2
 274 00b4 00000000 		.word	.LANCHOR8
 275 00b8 00100240 		.word	1073876992
 276              		.cfi_endproc
 277              	.LFE132:
 279              		.section	.text.task_timer,"ax",%progbits
 280              		.align	1
 281              		.global	task_timer
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	task_timer:
 288              	.LFB134:
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** void task_timer(void)
 321:Core/Src/main.c **** {
 289              		.loc 1 321 1 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293 0000 08B5     		push	{r3, lr}
 294              	.LCFI2:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 3, -8
 297              		.cfi_offset 14, -4
 322:Core/Src/main.c **** 	if (!f_timer_10ms)
 298              		.loc 1 322 2 view .LVU65
 299              		.loc 1 322 6 is_stmt 0 view .LVU66
 300 0002 194B     		ldr	r3, .L27
 301 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302              		.loc 1 322 5 view .LVU67
 303 0006 BBB1     		cbz	r3, .L19
 323:Core/Src/main.c **** 		return;		  // checking if 10 ms timer interrupt is set (10 ms), if set then do timer task
 324:Core/Src/main.c **** 	f_timer_10ms = 0; // clear the flag to wait next interupt
 304              		.loc 1 324 2 is_stmt 1 view .LVU68
 305              		.loc 1 324 15 is_stmt 0 view .LVU69
 306 0008 174B     		ldr	r3, .L27
 307 000a 0022     		movs	r2, #0
 308 000c 1A70     		strb	r2, [r3]
 325:Core/Src/main.c **** 
 326:Core/Src/main.c **** 	d_timer_30ms++; // count timer for 30 ms interval
 309              		.loc 1 326 2 is_stmt 1 view .LVU70
 310              		.loc 1 326 14 is_stmt 0 view .LVU71
 311 000e 174A     		ldr	r2, .L27+4
 312 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 313 0012 0133     		adds	r3, r3, #1
 314 0014 DBB2     		uxtb	r3, r3
 315 0016 1370     		strb	r3, [r2]
 327:Core/Src/main.c **** 
 328:Core/Src/main.c **** 	if (d_timer_30ms == 3) // checking if the count reached 30 ms
 316              		.loc 1 328 2 is_stmt 1 view .LVU72
ARM GAS  /tmp/ccrM433n.s 			page 13


 317              		.loc 1 328 5 is_stmt 0 view .LVU73
 318 0018 032B     		cmp	r3, #3
 319 001a 0ED0     		beq	.L24
 320              	.L21:
 329:Core/Src/main.c **** 	{
 330:Core/Src/main.c **** 		d_timer_30ms = 0; // assign "0" to repeat counting
 331:Core/Src/main.c **** 		f_timer_30ms = 1; // Set flag to inform 30 ms timer is done counting
 332:Core/Src/main.c **** 	}
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** 	d_timer_20ms++;
 321              		.loc 1 334 2 is_stmt 1 view .LVU74
 322              		.loc 1 334 14 is_stmt 0 view .LVU75
 323 001c 144A     		ldr	r2, .L27+8
 324 001e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 325 0020 0133     		adds	r3, r3, #1
 326 0022 DBB2     		uxtb	r3, r3
 327 0024 1370     		strb	r3, [r2]
 335:Core/Src/main.c **** 	if (d_timer_20ms == 2)
 328              		.loc 1 335 2 is_stmt 1 view .LVU76
 329              		.loc 1 335 5 is_stmt 0 view .LVU77
 330 0026 022B     		cmp	r3, #2
 331 0028 0ED0     		beq	.L25
 332              	.L22:
 336:Core/Src/main.c **** 	{
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** 		d_timer_20ms = 0;
 339:Core/Src/main.c **** 		f_timer_20ms = 1;
 340:Core/Src/main.c **** 	}
 341:Core/Src/main.c **** 	d_timer_50ms++;
 333              		.loc 1 341 2 is_stmt 1 view .LVU78
 334              		.loc 1 341 14 is_stmt 0 view .LVU79
 335 002a 124A     		ldr	r2, .L27+12
 336 002c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 337 002e 0133     		adds	r3, r3, #1
 338 0030 DBB2     		uxtb	r3, r3
 339 0032 1370     		strb	r3, [r2]
 342:Core/Src/main.c **** 	if (d_timer_50ms == 10)
 340              		.loc 1 342 2 is_stmt 1 view .LVU80
 341              		.loc 1 342 5 is_stmt 0 view .LVU81
 342 0034 0A2B     		cmp	r3, #10
 343 0036 0ED0     		beq	.L26
 344              	.L19:
 343:Core/Src/main.c **** 	{
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** 		d_timer_50ms = 0;
 346:Core/Src/main.c **** 		// f_timer_50ms=1;
 347:Core/Src/main.c **** 		buffer_push(&event_buffer, EVENT_QUERRY);
 348:Core/Src/main.c **** 	}
 349:Core/Src/main.c **** 	/*
 350:Core/Src/main.c **** 		d_timer_TX1++;
 351:Core/Src/main.c **** 			if(d_timer_TX1>=TX1_delay_val)     // checking if the count reached LED interval
 352:Core/Src/main.c **** 			{
 353:Core/Src/main.c **** 				d_timer_TX1=0;		// assign "0" to repeat counting
 354:Core/Src/main.c **** 				buffer_push(&event_buffer,EVENT_TX1_UPDATE);
 355:Core/Src/main.c **** 
 356:Core/Src/main.c **** 			}
 357:Core/Src/main.c **** 
ARM GAS  /tmp/ccrM433n.s 			page 14


 358:Core/Src/main.c **** 		d_timer_TX2++;
 359:Core/Src/main.c **** 			if(d_timer_TX2>=TX2_delay_val)     // checking if the count reached LED interval
 360:Core/Src/main.c **** 			{
 361:Core/Src/main.c **** 				d_timer_TX2=0;		// assign "0" to repeat counting
 362:Core/Src/main.c **** 				buffer_push(&event_buffer,EVENT_TX2_UPDATE);
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** 			}
 365:Core/Src/main.c **** 	*/
 366:Core/Src/main.c **** }
 345              		.loc 1 366 1 view .LVU82
 346 0038 08BD     		pop	{r3, pc}
 347              	.L24:
 330:Core/Src/main.c **** 		f_timer_30ms = 1; // Set flag to inform 30 ms timer is done counting
 348              		.loc 1 330 3 is_stmt 1 view .LVU83
 330:Core/Src/main.c **** 		f_timer_30ms = 1; // Set flag to inform 30 ms timer is done counting
 349              		.loc 1 330 16 is_stmt 0 view .LVU84
 350 003a 1346     		mov	r3, r2
 351 003c 0022     		movs	r2, #0
 352 003e 1A70     		strb	r2, [r3]
 331:Core/Src/main.c **** 	}
 353              		.loc 1 331 3 is_stmt 1 view .LVU85
 331:Core/Src/main.c **** 	}
 354              		.loc 1 331 16 is_stmt 0 view .LVU86
 355 0040 0D4B     		ldr	r3, .L27+16
 356 0042 0122     		movs	r2, #1
 357 0044 1A70     		strb	r2, [r3]
 358 0046 E9E7     		b	.L21
 359              	.L25:
 338:Core/Src/main.c **** 		f_timer_20ms = 1;
 360              		.loc 1 338 3 is_stmt 1 view .LVU87
 338:Core/Src/main.c **** 		f_timer_20ms = 1;
 361              		.loc 1 338 16 is_stmt 0 view .LVU88
 362 0048 1346     		mov	r3, r2
 363 004a 0022     		movs	r2, #0
 364 004c 1A70     		strb	r2, [r3]
 339:Core/Src/main.c **** 	}
 365              		.loc 1 339 3 is_stmt 1 view .LVU89
 339:Core/Src/main.c **** 	}
 366              		.loc 1 339 16 is_stmt 0 view .LVU90
 367 004e 0B4B     		ldr	r3, .L27+20
 368 0050 0122     		movs	r2, #1
 369 0052 1A70     		strb	r2, [r3]
 370 0054 E9E7     		b	.L22
 371              	.L26:
 345:Core/Src/main.c **** 		// f_timer_50ms=1;
 372              		.loc 1 345 3 is_stmt 1 view .LVU91
 345:Core/Src/main.c **** 		// f_timer_50ms=1;
 373              		.loc 1 345 16 is_stmt 0 view .LVU92
 374 0056 1346     		mov	r3, r2
 375 0058 0022     		movs	r2, #0
 376 005a 1A70     		strb	r2, [r3]
 347:Core/Src/main.c **** 	}
 377              		.loc 1 347 3 is_stmt 1 view .LVU93
 378 005c 0621     		movs	r1, #6
 379 005e 0848     		ldr	r0, .L27+24
 380 0060 FFF7FEFF 		bl	buffer_push
 381              	.LVL12:
ARM GAS  /tmp/ccrM433n.s 			page 15


 382 0064 E8E7     		b	.L19
 383              	.L28:
 384 0066 00BF     		.align	2
 385              	.L27:
 386 0068 00000000 		.word	.LANCHOR9
 387 006c 00000000 		.word	.LANCHOR10
 388 0070 00000000 		.word	.LANCHOR12
 389 0074 00000000 		.word	.LANCHOR13
 390 0078 00000000 		.word	.LANCHOR11
 391 007c 00000000 		.word	.LANCHOR0
 392 0080 00000000 		.word	.LANCHOR14
 393              		.cfi_endproc
 394              	.LFE134:
 396              		.section	.text.key_read_task,"ax",%progbits
 397              		.align	1
 398              		.global	key_read_task
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu fpv4-sp-d16
 404              	key_read_task:
 405              	.LFB135:
 367:Core/Src/main.c **** 
 368:Core/Src/main.c **** void key_read_task(void)
 369:Core/Src/main.c **** {
 406              		.loc 1 369 1 view -0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410 0000 08B5     		push	{r3, lr}
 411              	.LCFI3:
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 3, -8
 414              		.cfi_offset 14, -4
 370:Core/Src/main.c **** 	if (!f_timer_30ms)
 415              		.loc 1 370 2 view .LVU95
 416              		.loc 1 370 6 is_stmt 0 view .LVU96
 417 0002 1F4B     		ldr	r3, .L39
 418 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 419              		.loc 1 370 5 view .LVU97
 420 0006 33B3     		cbz	r3, .L29
 371:Core/Src/main.c **** 		return;		  // Checking if 30 ms counting is done
 372:Core/Src/main.c **** 	f_timer_30ms = 0; // clear the flag to wait next counting
 421              		.loc 1 372 2 is_stmt 1 view .LVU98
 422              		.loc 1 372 15 is_stmt 0 view .LVU99
 423 0008 1D4B     		ldr	r3, .L39
 424 000a 0022     		movs	r2, #0
 425 000c 1A70     		strb	r2, [r3]
 373:Core/Src/main.c **** 
 374:Core/Src/main.c **** 	uint8_t key_pindata = (uint8_t)(GPIOG->IDR & (KEY1_Pin | KEY2_Pin));
 426              		.loc 1 374 2 is_stmt 1 view .LVU100
 427              		.loc 1 374 39 is_stmt 0 view .LVU101
 428 000e 1D4B     		ldr	r3, .L39+4
 429 0010 1869     		ldr	r0, [r3, #16]
 430              	.LVL13:
 375:Core/Src/main.c **** 
 376:Core/Src/main.c **** 	key1_data = key1_data << 1; // Preparing to read KEY1 Input
ARM GAS  /tmp/ccrM433n.s 			page 16


 431              		.loc 1 376 2 is_stmt 1 view .LVU102
 432              		.loc 1 376 24 is_stmt 0 view .LVU103
 433 0012 1D4B     		ldr	r3, .L39+8
 434 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 435 0016 5200     		lsls	r2, r2, #1
 436 0018 D2B2     		uxtb	r2, r2
 437              		.loc 1 376 12 view .LVU104
 438 001a 1A70     		strb	r2, [r3]
 377:Core/Src/main.c **** 	key1_data &= 0b00001110;
 439              		.loc 1 377 2 is_stmt 1 view .LVU105
 440              		.loc 1 377 12 is_stmt 0 view .LVU106
 441 001c 02F00E02 		and	r2, r2, #14
 442 0020 1A70     		strb	r2, [r3]
 378:Core/Src/main.c **** 	key1_data |= ((key_pindata >> 2) & 0x1); // Read KEY1 Input
 443              		.loc 1 378 2 is_stmt 1 view .LVU107
 444              		.loc 1 378 35 is_stmt 0 view .LVU108
 445 0022 C0F38001 		ubfx	r1, r0, #2, #1
 446              		.loc 1 378 12 view .LVU109
 447 0026 0A43     		orrs	r2, r2, r1
 448 0028 1A70     		strb	r2, [r3]
 379:Core/Src/main.c **** 
 380:Core/Src/main.c **** 	key2_data = key2_data << 1; // Preparing to read KEY2 Input
 449              		.loc 1 380 2 is_stmt 1 view .LVU110
 450              		.loc 1 380 24 is_stmt 0 view .LVU111
 451 002a 1849     		ldr	r1, .L39+12
 452 002c 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 453 002e 5B00     		lsls	r3, r3, #1
 454 0030 DBB2     		uxtb	r3, r3
 455              		.loc 1 380 12 view .LVU112
 456 0032 0B70     		strb	r3, [r1]
 381:Core/Src/main.c **** 	key2_data &= 0b00001110;
 457              		.loc 1 381 2 is_stmt 1 view .LVU113
 458              		.loc 1 381 12 is_stmt 0 view .LVU114
 459 0034 03F00E03 		and	r3, r3, #14
 460 0038 0B70     		strb	r3, [r1]
 382:Core/Src/main.c **** 	key2_data |= (key_pindata >> 3); // Read KEY2 Input
 461              		.loc 1 382 2 is_stmt 1 view .LVU115
 462              		.loc 1 382 12 is_stmt 0 view .LVU116
 463 003a C0F3C000 		ubfx	r0, r0, #3, #1
 464              	.LVL14:
 465              		.loc 1 382 12 view .LVU117
 466 003e 0343     		orrs	r3, r3, r0
 467 0040 0B70     		strb	r3, [r1]
 383:Core/Src/main.c **** 
 384:Core/Src/main.c **** 	if (key1_data == KEY_PRESSED) // Checking if KEY1 is pressed
 468              		.loc 1 384 2 is_stmt 1 view .LVU118
 469              		.loc 1 384 5 is_stmt 0 view .LVU119
 470 0042 0C2A     		cmp	r2, #12
 471 0044 08D0     		beq	.L35
 385:Core/Src/main.c **** 	{
 386:Core/Src/main.c **** 		buffer_push(&event_buffer, EVENT_KEY1_PRESSED); // Store the event in buffer
 387:Core/Src/main.c **** 	}
 388:Core/Src/main.c **** 	else if (key1_data == KEY_RELEASED) //  Checking if KEY1 is released
 472              		.loc 1 388 7 is_stmt 1 view .LVU120
 473              		.loc 1 388 10 is_stmt 0 view .LVU121
 474 0046 032A     		cmp	r2, #3
 475 0048 0BD0     		beq	.L36
ARM GAS  /tmp/ccrM433n.s 			page 17


 476              	.L32:
 389:Core/Src/main.c **** 	{
 390:Core/Src/main.c **** 		buffer_push(&event_buffer, EVENT_KEY1_RELEASED); // Store the event in buffer
 391:Core/Src/main.c **** 	}
 392:Core/Src/main.c **** 
 393:Core/Src/main.c **** 	if (key2_data == KEY_PRESSED) // Checking if KEY2 is pressed
 477              		.loc 1 393 2 is_stmt 1 view .LVU122
 478              		.loc 1 393 16 is_stmt 0 view .LVU123
 479 004a 104B     		ldr	r3, .L39+12
 480 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 481              		.loc 1 393 5 view .LVU124
 482 004e 0C2B     		cmp	r3, #12
 483 0050 0CD0     		beq	.L37
 394:Core/Src/main.c **** 	{
 395:Core/Src/main.c **** 		buffer_push(&event_buffer, EVENT_KEY2_PRESSED); // Store the event in buffer
 396:Core/Src/main.c **** 	}
 397:Core/Src/main.c **** 	else if (key2_data == KEY_RELEASED) //  Checking if KEY2 is released
 484              		.loc 1 397 7 is_stmt 1 view .LVU125
 485              		.loc 1 397 10 is_stmt 0 view .LVU126
 486 0052 032B     		cmp	r3, #3
 487 0054 0FD0     		beq	.L38
 488              	.L29:
 398:Core/Src/main.c **** 	{
 399:Core/Src/main.c **** 		buffer_push(&event_buffer, EVENT_KEY2_RELEASED); // Store the event in buffer
 400:Core/Src/main.c **** 	}
 401:Core/Src/main.c **** }
 489              		.loc 1 401 1 view .LVU127
 490 0056 08BD     		pop	{r3, pc}
 491              	.L35:
 386:Core/Src/main.c **** 	}
 492              		.loc 1 386 3 is_stmt 1 view .LVU128
 493 0058 0121     		movs	r1, #1
 494 005a 0D48     		ldr	r0, .L39+16
 495 005c FFF7FEFF 		bl	buffer_push
 496              	.LVL15:
 497 0060 F3E7     		b	.L32
 498              	.L36:
 390:Core/Src/main.c **** 	}
 499              		.loc 1 390 3 view .LVU129
 500 0062 0321     		movs	r1, #3
 501 0064 0A48     		ldr	r0, .L39+16
 502 0066 FFF7FEFF 		bl	buffer_push
 503              	.LVL16:
 504 006a EEE7     		b	.L32
 505              	.L37:
 395:Core/Src/main.c **** 	}
 506              		.loc 1 395 3 view .LVU130
 507 006c 0221     		movs	r1, #2
 508 006e 0848     		ldr	r0, .L39+16
 509 0070 FFF7FEFF 		bl	buffer_push
 510              	.LVL17:
 511 0074 EFE7     		b	.L29
 512              	.L38:
 399:Core/Src/main.c **** 	}
 513              		.loc 1 399 3 view .LVU131
 514 0076 0421     		movs	r1, #4
 515 0078 0548     		ldr	r0, .L39+16
ARM GAS  /tmp/ccrM433n.s 			page 18


 516 007a FFF7FEFF 		bl	buffer_push
 517              	.LVL18:
 518 007e EAE7     		b	.L29
 519              	.L40:
 520              		.align	2
 521              	.L39:
 522 0080 00000000 		.word	.LANCHOR11
 523 0084 00180240 		.word	1073879040
 524 0088 00000000 		.word	.LANCHOR15
 525 008c 00000000 		.word	.LANCHOR16
 526 0090 00000000 		.word	.LANCHOR14
 527              		.cfi_endproc
 528              	.LFE135:
 530              		.section	.text.RS485_Send_Message,"ax",%progbits
 531              		.align	1
 532              		.global	RS485_Send_Message
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv4-sp-d16
 538              	RS485_Send_Message:
 539              	.LVL19:
 540              	.LFB138:
 402:Core/Src/main.c **** 
 403:Core/Src/main.c **** void main_task(void)
 404:Core/Src/main.c **** {
 405:Core/Src/main.c **** 
 406:Core/Src/main.c **** 	if (event_buffer.head != event_buffer.tail)
 407:Core/Src/main.c **** 	{
 408:Core/Src/main.c **** 		
 409:Core/Src/main.c **** 		event = buffer_pop(&event_buffer); // if there is event then get the event from buffer
 410:Core/Src/main.c **** 
 411:Core/Src/main.c **** 	}
 412:Core/Src/main.c **** 
 413:Core/Src/main.c **** 
 414:Core/Src/main.c **** 	switch(state)
 415:Core/Src/main.c **** 	{
 416:Core/Src/main.c **** 		case STATE_ASSIGNED_ADDR:
 417:Core/Src/main.c **** 			case EVENT_QUERRY:
 418:Core/Src/main.c **** 				RS485_Send_Message(ADDR, FUNC_READ, 0xFF);
 419:Core/Src/main.c **** 				event = EVENT_RESET;
 420:Core/Src/main.c **** 				break;
 421:Core/Src/main.c **** 
 422:Core/Src/main.c **** 			case EVENT_RX_COMPLETE:
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** 				RS485_Read_Message();
 425:Core/Src/main.c **** 				event = EVENT_RESET;
 426:Core/Src/main.c **** 				break;
 427:Core/Src/main.c **** 
 428:Core/Src/main.c **** 			case EVENT_NEW_DEVICE:
 429:Core/Src/main.c **** 				state = STATE_OPERATION;
 430:Core/Src/main.c **** 				num_slave++;
 431:Core/Src/main.c **** 				RS485_Send_Message(0x10, FUNC_ASSIGN_ADDR, ADDR|num_slave);
 432:Core/Src/main.c **** 				event = EVENT_RESET;
 433:Core/Src/main.c **** 				break;
 434:Core/Src/main.c **** 			
 435:Core/Src/main.c **** 		break;
ARM GAS  /tmp/ccrM433n.s 			page 19


 436:Core/Src/main.c **** 
 437:Core/Src/main.c **** 		case STATE_OPERATION:
 438:Core/Src/main.c **** 			switch (event)
 439:Core/Src/main.c **** 			{
 440:Core/Src/main.c **** 			case EVENT_KEY1_PRESSED:
 441:Core/Src/main.c **** 				digit1++;
 442:Core/Src/main.c **** 
 443:Core/Src/main.c **** 				if (digit1 > 9)
 444:Core/Src/main.c **** 				{
 445:Core/Src/main.c **** 					digit1 = 0;
 446:Core/Src/main.c **** 				}
 447:Core/Src/main.c **** 
 448:Core/Src/main.c **** 				RS485_Send_Message(0x10, FUNC_WRITE, (digit1 + '0'));
 449:Core/Src/main.c **** 				event = EVENT_RESET;
 450:Core/Src/main.c **** 				break;
 451:Core/Src/main.c **** 
 452:Core/Src/main.c **** 			case EVENT_KEY2_PRESSED:
 453:Core/Src/main.c **** 				digit2++;
 454:Core/Src/main.c **** 				if (digit2 > 15)
 455:Core/Src/main.c **** 				{
 456:Core/Src/main.c **** 					digit2 = 10;
 457:Core/Src/main.c **** 				}
 458:Core/Src/main.c **** 				RS485_Send_Message(0x10, FUNC_WRITE, (digit1 + '0'));
 459:Core/Src/main.c **** 
 460:Core/Src/main.c **** 				event = EVENT_RESET;
 461:Core/Src/main.c **** 
 462:Core/Src/main.c **** 				break;
 463:Core/Src/main.c **** 			case EVENT_RX_COMPLETE:
 464:Core/Src/main.c **** 
 465:Core/Src/main.c **** 				RS485_Read_Message();
 466:Core/Src/main.c **** 				event = EVENT_RESET;
 467:Core/Src/main.c **** 				break;
 468:Core/Src/main.c **** 
 469:Core/Src/main.c **** 			case EVENT_QUERRY:
 470:Core/Src/main.c **** 
 471:Core/Src/main.c **** 				for (int i =0; i <num_slave+1;i++){
 472:Core/Src/main.c **** 					if (f_querry==i) {
 473:Core/Src/main.c **** 					RS485_Send_Message((ADDR|i), FUNC_READ, 0xFF);
 474:Core/Src/main.c **** 					break;	
 475:Core/Src/main.c **** 					}
 476:Core/Src/main.c **** 				}
 477:Core/Src/main.c **** 				f_querry++;
 478:Core/Src/main.c **** 				if (f_querry==num_slave){
 479:Core/Src/main.c **** 					f_querry=0;
 480:Core/Src/main.c **** 				}	
 481:Core/Src/main.c **** 						
 482:Core/Src/main.c **** 				event = EVENT_RESET;
 483:Core/Src/main.c **** 				break;
 484:Core/Src/main.c **** 			}
 485:Core/Src/main.c **** 		break;
 486:Core/Src/main.c **** 
 487:Core/Src/main.c **** 	}
 488:Core/Src/main.c **** 
 489:Core/Src/main.c **** 	
 490:Core/Src/main.c **** 
 491:Core/Src/main.c **** 
 492:Core/Src/main.c **** }
ARM GAS  /tmp/ccrM433n.s 			page 20


 493:Core/Src/main.c **** 
 494:Core/Src/main.c **** /*
 495:Core/Src/main.c **** void TX1_delay_update(void){
 496:Core/Src/main.c **** 
 497:Core/Src/main.c **** 	if (TX1_delay_val==50) return;
 498:Core/Src/main.c **** 
 499:Core/Src/main.c **** 	TX1_delay_val-=50;
 500:Core/Src/main.c **** }
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** void TX2_delay_update(void){
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** 	if (TX2_delay_val==50) return;
 505:Core/Src/main.c **** 
 506:Core/Src/main.c **** 	TX2_delay_val-=50;
 507:Core/Src/main.c **** }
 508:Core/Src/main.c **** 
 509:Core/Src/main.c **** */
 510:Core/Src/main.c **** 
 511:Core/Src/main.c **** void RS485_Read_Message(void)
 512:Core/Src/main.c **** {
 513:Core/Src/main.c **** 	uint8_t * digit;
 514:Core/Src/main.c **** 	if (rx2_buffer.tail == rx2_buffer.head)
 515:Core/Src/main.c **** 		return;
 516:Core/Src/main.c **** 
 517:Core/Src/main.c **** 	buffer_to_message(&rx2_buffer, RX_msg);
 518:Core/Src/main.c **** 
 519:Core/Src/main.c **** 	if (check_checksum(RX_msg) == CHECKSUM_ERROR)
 520:Core/Src/main.c **** 	{
 521:Core/Src/main.c **** 		//RS485_Send_Message(TX_msg[0], TX_msg[1], TX_msg[2]);
 522:Core/Src/main.c **** 		//error = ERROR_CHECKSUM;
 523:Core/Src/main.c **** 		return;
 524:Core/Src/main.c **** 	}
 525:Core/Src/main.c **** 
 526:Core/Src/main.c **** 	if (RX_msg[0] == (ADDR|1))
 527:Core/Src/main.c **** 	{
 528:Core/Src/main.c **** 		 digit = &digit1;
 529:Core/Src/main.c **** 	}
 530:Core/Src/main.c **** 	else if (RX_msg[0] == (ADDR|2))
 531:Core/Src/main.c **** 	{
 532:Core/Src/main.c **** 		 digit = &digit2;
 533:Core/Src/main.c **** 	}else if(RX_msg[0] == ADDR){
 534:Core/Src/main.c **** 		 buffer_push(&event_buffer, EVENT_NEW_DEVICE);
 535:Core/Src/main.c **** 		 state = STATE_ASSIGNED_ADDR;	
 536:Core/Src/main.c **** 		return;
 537:Core/Src/main.c **** 	}else{
 538:Core/Src/main.c **** 		return;
 539:Core/Src/main.c **** 	}
 540:Core/Src/main.c **** 
 541:Core/Src/main.c **** 	if (RX_msg[1] == FUNC_READ)
 542:Core/Src/main.c **** 	{
 543:Core/Src/main.c **** 		*digit = (RX_msg[2] - '0');
 544:Core/Src/main.c **** 	}
 545:Core/Src/main.c **** 	else if (RX_msg[1] == FUNC_RESEND)
 546:Core/Src/main.c **** 	{
 547:Core/Src/main.c **** 		RS485_Send_Message(TX_msg[0], TX_msg[1], TX_msg[2]);
 548:Core/Src/main.c **** 	}
 549:Core/Src/main.c **** }
ARM GAS  /tmp/ccrM433n.s 			page 21


 550:Core/Src/main.c **** 
 551:Core/Src/main.c **** void RS485_Send_Message(uint8_t address, uint8_t func_code, uint8_t data)
 552:Core/Src/main.c **** {
 541              		.loc 1 552 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		.loc 1 552 1 is_stmt 0 view .LVU133
 546 0000 70B5     		push	{r4, r5, r6, lr}
 547              	.LCFI4:
 548              		.cfi_def_cfa_offset 16
 549              		.cfi_offset 4, -16
 550              		.cfi_offset 5, -12
 551              		.cfi_offset 6, -8
 552              		.cfi_offset 14, -4
 553:Core/Src/main.c **** 	TX_msg[0] = address;
 553              		.loc 1 553 2 is_stmt 1 view .LVU134
 554              		.loc 1 553 12 is_stmt 0 view .LVU135
 555 0002 144C     		ldr	r4, .L43
 556 0004 2070     		strb	r0, [r4]
 554:Core/Src/main.c **** 	TX_msg[1] = func_code;
 557              		.loc 1 554 2 is_stmt 1 view .LVU136
 558              		.loc 1 554 12 is_stmt 0 view .LVU137
 559 0006 6170     		strb	r1, [r4, #1]
 555:Core/Src/main.c **** 	TX_msg[2] = data;
 560              		.loc 1 555 2 is_stmt 1 view .LVU138
 561              		.loc 1 555 12 is_stmt 0 view .LVU139
 562 0008 A270     		strb	r2, [r4, #2]
 556:Core/Src/main.c **** 	cal_checksum(TX_msg);
 563              		.loc 1 556 2 is_stmt 1 view .LVU140
 564 000a 2046     		mov	r0, r4
 565              	.LVL20:
 566              		.loc 1 556 2 is_stmt 0 view .LVU141
 567 000c FFF7FEFF 		bl	cal_checksum
 568              	.LVL21:
 557:Core/Src/main.c **** 
 558:Core/Src/main.c **** 	// uint8_t *pbuf_tx = (uint8_t *)&msg;
 559:Core/Src/main.c **** 	HAL_GPIO_WritePin(TX1_EN_GPIO_Port, TX1_EN_Pin, 1); /// Enable Transmitter Mode
 569              		.loc 1 559 2 is_stmt 1 view .LVU142
 570 0010 114E     		ldr	r6, .L43+4
 571 0012 0122     		movs	r2, #1
 572 0014 4FF48051 		mov	r1, #4096
 573 0018 3046     		mov	r0, r6
 574 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 575              	.LVL22:
 560:Core/Src/main.c **** 	HAL_UART_Transmit(&huart4, &start_cmd, 1, 10);
 576              		.loc 1 560 2 view .LVU143
 577 001e 0F4D     		ldr	r5, .L43+8
 578 0020 0A23     		movs	r3, #10
 579 0022 0122     		movs	r2, #1
 580 0024 0E49     		ldr	r1, .L43+12
 581 0026 2846     		mov	r0, r5
 582 0028 FFF7FEFF 		bl	HAL_UART_Transmit
 583              	.LVL23:
 561:Core/Src/main.c **** 
 562:Core/Src/main.c **** 	HAL_UART_Transmit(&huart4, TX_msg, sizeof(TX_msg), 10);
 584              		.loc 1 562 2 view .LVU144
ARM GAS  /tmp/ccrM433n.s 			page 22


 585 002c 0A23     		movs	r3, #10
 586 002e 0422     		movs	r2, #4
 587 0030 2146     		mov	r1, r4
 588 0032 2846     		mov	r0, r5
 589 0034 FFF7FEFF 		bl	HAL_UART_Transmit
 590              	.LVL24:
 563:Core/Src/main.c **** 
 564:Core/Src/main.c **** 	HAL_UART_Transmit(&huart4, &stop_cmd, 1, 10);
 591              		.loc 1 564 2 view .LVU145
 592 0038 0A23     		movs	r3, #10
 593 003a 0122     		movs	r2, #1
 594 003c 0949     		ldr	r1, .L43+16
 595 003e 2846     		mov	r0, r5
 596 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 597              	.LVL25:
 565:Core/Src/main.c **** 
 566:Core/Src/main.c **** 	HAL_GPIO_WritePin(TX1_EN_GPIO_Port, TX1_EN_Pin, 0); /// Enable Receiver Mode
 598              		.loc 1 566 2 view .LVU146
 599 0044 0022     		movs	r2, #0
 600 0046 4FF48051 		mov	r1, #4096
 601 004a 3046     		mov	r0, r6
 602 004c FFF7FEFF 		bl	HAL_GPIO_WritePin
 603              	.LVL26:
 567:Core/Src/main.c **** }
 604              		.loc 1 567 1 is_stmt 0 view .LVU147
 605 0050 70BD     		pop	{r4, r5, r6, pc}
 606              	.L44:
 607 0052 00BF     		.align	2
 608              	.L43:
 609 0054 00000000 		.word	.LANCHOR17
 610 0058 00000240 		.word	1073872896
 611 005c 00000000 		.word	huart4
 612 0060 00000000 		.word	.LANCHOR18
 613 0064 00000000 		.word	.LANCHOR19
 614              		.cfi_endproc
 615              	.LFE138:
 617              		.section	.text.RS485_Read_Message,"ax",%progbits
 618              		.align	1
 619              		.global	RS485_Read_Message
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu fpv4-sp-d16
 625              	RS485_Read_Message:
 626              	.LFB137:
 512:Core/Src/main.c **** 	uint8_t * digit;
 627              		.loc 1 512 1 is_stmt 1 view -0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 513:Core/Src/main.c **** 	if (rx2_buffer.tail == rx2_buffer.head)
 631              		.loc 1 513 2 view .LVU149
 514:Core/Src/main.c **** 		return;
 632              		.loc 1 514 2 view .LVU150
 514:Core/Src/main.c **** 		return;
 633              		.loc 1 514 16 is_stmt 0 view .LVU151
 634 0000 1A4B     		ldr	r3, .L57
ARM GAS  /tmp/ccrM433n.s 			page 23


 635 0002 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 514:Core/Src/main.c **** 		return;
 636              		.loc 1 514 35 view .LVU152
 637 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 514:Core/Src/main.c **** 		return;
 638              		.loc 1 514 5 view .LVU153
 639 0006 9A42     		cmp	r2, r3
 640 0008 2ED0     		beq	.L52
 512:Core/Src/main.c **** 	uint8_t * digit;
 641              		.loc 1 512 1 view .LVU154
 642 000a 10B5     		push	{r4, lr}
 643              	.LCFI5:
 644              		.cfi_def_cfa_offset 8
 645              		.cfi_offset 4, -8
 646              		.cfi_offset 14, -4
 517:Core/Src/main.c **** 
 647              		.loc 1 517 2 is_stmt 1 view .LVU155
 648 000c 184C     		ldr	r4, .L57+4
 649 000e 2146     		mov	r1, r4
 650 0010 1648     		ldr	r0, .L57
 651 0012 FFF7FEFF 		bl	buffer_to_message
 652              	.LVL27:
 519:Core/Src/main.c **** 	{
 653              		.loc 1 519 2 view .LVU156
 519:Core/Src/main.c **** 	{
 654              		.loc 1 519 6 is_stmt 0 view .LVU157
 655 0016 2046     		mov	r0, r4
 656 0018 FFF7FEFF 		bl	check_checksum
 657              	.LVL28:
 519:Core/Src/main.c **** 	{
 658              		.loc 1 519 5 view .LVU158
 659 001c 30B1     		cbz	r0, .L45
 526:Core/Src/main.c **** 	{
 660              		.loc 1 526 2 is_stmt 1 view .LVU159
 526:Core/Src/main.c **** 	{
 661              		.loc 1 526 12 is_stmt 0 view .LVU160
 662 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 526:Core/Src/main.c **** 	{
 663              		.loc 1 526 5 view .LVU161
 664 0020 112B     		cmp	r3, #17
 665 0022 0CD0     		beq	.L49
 530:Core/Src/main.c **** 	{
 666              		.loc 1 530 7 is_stmt 1 view .LVU162
 530:Core/Src/main.c **** 	{
 667              		.loc 1 530 10 is_stmt 0 view .LVU163
 668 0024 122B     		cmp	r3, #18
 669 0026 18D0     		beq	.L50
 533:Core/Src/main.c **** 		 buffer_push(&event_buffer, EVENT_NEW_DEVICE);
 670              		.loc 1 533 8 is_stmt 1 view .LVU164
 533:Core/Src/main.c **** 		 buffer_push(&event_buffer, EVENT_NEW_DEVICE);
 671              		.loc 1 533 10 is_stmt 0 view .LVU165
 672 0028 102B     		cmp	r3, #16
 673 002a 00D0     		beq	.L55
 674              	.L45:
 549:Core/Src/main.c **** 
 675              		.loc 1 549 1 view .LVU166
 676 002c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccrM433n.s 			page 24


 677              	.L55:
 534:Core/Src/main.c **** 		 state = STATE_ASSIGNED_ADDR;	
 678              		.loc 1 534 4 is_stmt 1 view .LVU167
 679 002e 0721     		movs	r1, #7
 680 0030 1048     		ldr	r0, .L57+8
 681 0032 FFF7FEFF 		bl	buffer_push
 682              	.LVL29:
 535:Core/Src/main.c **** 		return;
 683              		.loc 1 535 4 view .LVU168
 535:Core/Src/main.c **** 		return;
 684              		.loc 1 535 10 is_stmt 0 view .LVU169
 685 0036 104B     		ldr	r3, .L57+12
 686 0038 0022     		movs	r2, #0
 687 003a 1A70     		strb	r2, [r3]
 536:Core/Src/main.c **** 	}else{
 688              		.loc 1 536 3 is_stmt 1 view .LVU170
 689 003c F6E7     		b	.L45
 690              	.L49:
 528:Core/Src/main.c **** 	}
 691              		.loc 1 528 10 is_stmt 0 view .LVU171
 692 003e 0F4A     		ldr	r2, .L57+16
 693              	.L47:
 694              	.LVL30:
 541:Core/Src/main.c **** 	{
 695              		.loc 1 541 2 is_stmt 1 view .LVU172
 541:Core/Src/main.c **** 	{
 696              		.loc 1 541 12 is_stmt 0 view .LVU173
 697 0040 0B4B     		ldr	r3, .L57+4
 698 0042 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 541:Core/Src/main.c **** 	{
 699              		.loc 1 541 5 view .LVU174
 700 0044 022B     		cmp	r3, #2
 701 0046 0AD0     		beq	.L56
 545:Core/Src/main.c **** 	{
 702              		.loc 1 545 7 is_stmt 1 view .LVU175
 545:Core/Src/main.c **** 	{
 703              		.loc 1 545 10 is_stmt 0 view .LVU176
 704 0048 032B     		cmp	r3, #3
 705 004a EFD1     		bne	.L45
 547:Core/Src/main.c **** 	}
 706              		.loc 1 547 3 is_stmt 1 view .LVU177
 707 004c 0C4B     		ldr	r3, .L57+20
 708 004e 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 709              	.LVL31:
 547:Core/Src/main.c **** 	}
 710              		.loc 1 547 3 is_stmt 0 view .LVU178
 711 0050 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 712 0052 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 713 0054 FFF7FEFF 		bl	RS485_Send_Message
 714              	.LVL32:
 715 0058 E8E7     		b	.L45
 716              	.L50:
 532:Core/Src/main.c **** 	}else if(RX_msg[0] == ADDR){
 717              		.loc 1 532 10 view .LVU179
 718 005a 0A4A     		ldr	r2, .L57+24
 719 005c F0E7     		b	.L47
 720              	.LVL33:
ARM GAS  /tmp/ccrM433n.s 			page 25


 721              	.L56:
 543:Core/Src/main.c **** 	}
 722              		.loc 1 543 3 is_stmt 1 view .LVU180
 543:Core/Src/main.c **** 	}
 723              		.loc 1 543 19 is_stmt 0 view .LVU181
 724 005e 044B     		ldr	r3, .L57+4
 725 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 543:Core/Src/main.c **** 	}
 726              		.loc 1 543 23 view .LVU182
 727 0062 303B     		subs	r3, r3, #48
 543:Core/Src/main.c **** 	}
 728              		.loc 1 543 10 view .LVU183
 729 0064 1370     		strb	r3, [r2]
 730 0066 E1E7     		b	.L45
 731              	.LVL34:
 732              	.L52:
 733              	.LCFI6:
 734              		.cfi_def_cfa_offset 0
 735              		.cfi_restore 4
 736              		.cfi_restore 14
 543:Core/Src/main.c **** 	}
 737              		.loc 1 543 10 view .LVU184
 738 0068 7047     		bx	lr
 739              	.L58:
 740 006a 00BF     		.align	2
 741              	.L57:
 742 006c 00000000 		.word	.LANCHOR20
 743 0070 00000000 		.word	.LANCHOR21
 744 0074 00000000 		.word	.LANCHOR14
 745 0078 00000000 		.word	.LANCHOR22
 746 007c 00000000 		.word	.LANCHOR8
 747 0080 00000000 		.word	.LANCHOR17
 748 0084 00000000 		.word	.LANCHOR6
 749              		.cfi_endproc
 750              	.LFE137:
 752              		.section	.text.main_task,"ax",%progbits
 753              		.align	1
 754              		.global	main_task
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	main_task:
 761              	.LFB136:
 404:Core/Src/main.c **** 
 762              		.loc 1 404 1 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766 0000 08B5     		push	{r3, lr}
 767              	.LCFI7:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 3, -8
 770              		.cfi_offset 14, -4
 406:Core/Src/main.c **** 	{
 771              		.loc 1 406 2 view .LVU186
 406:Core/Src/main.c **** 	{
ARM GAS  /tmp/ccrM433n.s 			page 26


 772              		.loc 1 406 18 is_stmt 0 view .LVU187
 773 0002 504B     		ldr	r3, .L83
 774 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 406:Core/Src/main.c **** 	{
 775              		.loc 1 406 39 view .LVU188
 776 0006 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 406:Core/Src/main.c **** 	{
 777              		.loc 1 406 5 view .LVU189
 778 0008 9A42     		cmp	r2, r3
 779 000a 09D1     		bne	.L80
 780              	.L60:
 414:Core/Src/main.c **** 	{
 781              		.loc 1 414 2 is_stmt 1 view .LVU190
 782 000c 4E4B     		ldr	r3, .L83+4
 783 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 784 0010 072B     		cmp	r3, #7
 785 0012 13D8     		bhi	.L59
 786 0014 DFE803F0 		tbb	[pc, r3]
 787              	.L63:
 788 0018 0A       		.byte	(.L64-.L63)/2
 789 0019 2B       		.byte	(.L66-.L63)/2
 790 001a 12       		.byte	(.L59-.L63)/2
 791 001b 12       		.byte	(.L59-.L63)/2
 792 001c 12       		.byte	(.L59-.L63)/2
 793 001d 13       		.byte	(.L65-.L63)/2
 794 001e 0A       		.byte	(.L64-.L63)/2
 795 001f 19       		.byte	(.L62-.L63)/2
 796              		.p2align 1
 797              	.L80:
 409:Core/Src/main.c **** 
 798              		.loc 1 409 3 view .LVU191
 409:Core/Src/main.c **** 
 799              		.loc 1 409 11 is_stmt 0 view .LVU192
 800 0020 4848     		ldr	r0, .L83
 801 0022 FFF7FEFF 		bl	buffer_pop
 802              	.LVL35:
 409:Core/Src/main.c **** 
 803              		.loc 1 409 9 view .LVU193
 804 0026 494B     		ldr	r3, .L83+8
 805 0028 1870     		strb	r0, [r3]
 806 002a EFE7     		b	.L60
 807              	.L64:
 418:Core/Src/main.c **** 				event = EVENT_RESET;
 808              		.loc 1 418 5 is_stmt 1 view .LVU194
 809 002c FF22     		movs	r2, #255
 810 002e 0221     		movs	r1, #2
 811 0030 1020     		movs	r0, #16
 812 0032 FFF7FEFF 		bl	RS485_Send_Message
 813              	.LVL36:
 419:Core/Src/main.c **** 				break;
 814              		.loc 1 419 5 view .LVU195
 419:Core/Src/main.c **** 				break;
 815              		.loc 1 419 11 is_stmt 0 view .LVU196
 816 0036 454B     		ldr	r3, .L83+8
 817 0038 0022     		movs	r2, #0
 818 003a 1A70     		strb	r2, [r3]
 420:Core/Src/main.c **** 
ARM GAS  /tmp/ccrM433n.s 			page 27


 819              		.loc 1 420 5 is_stmt 1 view .LVU197
 820              	.L59:
 492:Core/Src/main.c **** 
 821              		.loc 1 492 1 is_stmt 0 view .LVU198
 822 003c 08BD     		pop	{r3, pc}
 823              	.L65:
 424:Core/Src/main.c **** 				event = EVENT_RESET;
 824              		.loc 1 424 5 is_stmt 1 view .LVU199
 825 003e FFF7FEFF 		bl	RS485_Read_Message
 826              	.LVL37:
 425:Core/Src/main.c **** 				break;
 827              		.loc 1 425 5 view .LVU200
 425:Core/Src/main.c **** 				break;
 828              		.loc 1 425 11 is_stmt 0 view .LVU201
 829 0042 424B     		ldr	r3, .L83+8
 830 0044 0022     		movs	r2, #0
 831 0046 1A70     		strb	r2, [r3]
 426:Core/Src/main.c **** 
 832              		.loc 1 426 5 is_stmt 1 view .LVU202
 833 0048 F8E7     		b	.L59
 834              	.L62:
 429:Core/Src/main.c **** 				num_slave++;
 835              		.loc 1 429 5 view .LVU203
 429:Core/Src/main.c **** 				num_slave++;
 836              		.loc 1 429 11 is_stmt 0 view .LVU204
 837 004a 3F4B     		ldr	r3, .L83+4
 838 004c 0122     		movs	r2, #1
 839 004e 1A70     		strb	r2, [r3]
 430:Core/Src/main.c **** 				RS485_Send_Message(0x10, FUNC_ASSIGN_ADDR, ADDR|num_slave);
 840              		.loc 1 430 5 is_stmt 1 view .LVU205
 430:Core/Src/main.c **** 				RS485_Send_Message(0x10, FUNC_ASSIGN_ADDR, ADDR|num_slave);
 841              		.loc 1 430 14 is_stmt 0 view .LVU206
 842 0050 3F4B     		ldr	r3, .L83+12
 843 0052 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 844 0054 0132     		adds	r2, r2, #1
 845 0056 D2B2     		uxtb	r2, r2
 846 0058 1A70     		strb	r2, [r3]
 431:Core/Src/main.c **** 				event = EVENT_RESET;
 847              		.loc 1 431 5 is_stmt 1 view .LVU207
 848 005a 42F01002 		orr	r2, r2, #16
 849 005e 0421     		movs	r1, #4
 850 0060 1020     		movs	r0, #16
 851 0062 FFF7FEFF 		bl	RS485_Send_Message
 852              	.LVL38:
 432:Core/Src/main.c **** 				break;
 853              		.loc 1 432 5 view .LVU208
 432:Core/Src/main.c **** 				break;
 854              		.loc 1 432 11 is_stmt 0 view .LVU209
 855 0066 394B     		ldr	r3, .L83+8
 856 0068 0022     		movs	r2, #0
 857 006a 1A70     		strb	r2, [r3]
 433:Core/Src/main.c **** 			
 858              		.loc 1 433 5 is_stmt 1 view .LVU210
 859 006c E6E7     		b	.L59
 860              	.L66:
 435:Core/Src/main.c **** 
 861              		.loc 1 435 3 view .LVU211
ARM GAS  /tmp/ccrM433n.s 			page 28


 438:Core/Src/main.c **** 			{
 862              		.loc 1 438 4 view .LVU212
 863 006e 374B     		ldr	r3, .L83+8
 864 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 0072 013B     		subs	r3, r3, #1
 866 0074 052B     		cmp	r3, #5
 867 0076 E1D8     		bhi	.L59
 868 0078 01A2     		adr	r2, .L68
 869 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 870 007e 00BF     		.p2align 2
 871              	.L68:
 872 0080 99000000 		.word	.L71+1
 873 0084 C5000000 		.word	.L70+1
 874 0088 3D000000 		.word	.L59+1
 875 008c 3D000000 		.word	.L59+1
 876 0090 F1000000 		.word	.L69+1
 877 0094 25010000 		.word	.L78+1
 878              		.p2align 1
 879              	.L71:
 441:Core/Src/main.c **** 
 880              		.loc 1 441 5 view .LVU213
 441:Core/Src/main.c **** 
 881              		.loc 1 441 11 is_stmt 0 view .LVU214
 882 0098 2E4A     		ldr	r2, .L83+16
 883 009a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 884 009c 0133     		adds	r3, r3, #1
 885 009e DBB2     		uxtb	r3, r3
 886 00a0 1370     		strb	r3, [r2]
 443:Core/Src/main.c **** 				{
 887              		.loc 1 443 5 is_stmt 1 view .LVU215
 443:Core/Src/main.c **** 				{
 888              		.loc 1 443 8 is_stmt 0 view .LVU216
 889 00a2 092B     		cmp	r3, #9
 890 00a4 02D9     		bls	.L72
 445:Core/Src/main.c **** 				}
 891              		.loc 1 445 6 is_stmt 1 view .LVU217
 445:Core/Src/main.c **** 				}
 892              		.loc 1 445 13 is_stmt 0 view .LVU218
 893 00a6 1346     		mov	r3, r2
 894 00a8 0022     		movs	r2, #0
 895 00aa 1A70     		strb	r2, [r3]
 896              	.L72:
 448:Core/Src/main.c **** 				event = EVENT_RESET;
 897              		.loc 1 448 5 is_stmt 1 view .LVU219
 898 00ac 294B     		ldr	r3, .L83+16
 899 00ae 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 900 00b0 3032     		adds	r2, r2, #48
 901 00b2 D2B2     		uxtb	r2, r2
 902 00b4 0121     		movs	r1, #1
 903 00b6 1020     		movs	r0, #16
 904 00b8 FFF7FEFF 		bl	RS485_Send_Message
 905              	.LVL39:
 449:Core/Src/main.c **** 				break;
 906              		.loc 1 449 5 view .LVU220
 449:Core/Src/main.c **** 				break;
 907              		.loc 1 449 11 is_stmt 0 view .LVU221
 908 00bc 234B     		ldr	r3, .L83+8
ARM GAS  /tmp/ccrM433n.s 			page 29


 909 00be 0022     		movs	r2, #0
 910 00c0 1A70     		strb	r2, [r3]
 450:Core/Src/main.c **** 
 911              		.loc 1 450 5 is_stmt 1 view .LVU222
 912 00c2 BBE7     		b	.L59
 913              	.L70:
 453:Core/Src/main.c **** 				if (digit2 > 15)
 914              		.loc 1 453 5 view .LVU223
 453:Core/Src/main.c **** 				if (digit2 > 15)
 915              		.loc 1 453 11 is_stmt 0 view .LVU224
 916 00c4 244A     		ldr	r2, .L83+20
 917 00c6 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 918 00c8 0133     		adds	r3, r3, #1
 919 00ca DBB2     		uxtb	r3, r3
 920 00cc 1370     		strb	r3, [r2]
 454:Core/Src/main.c **** 				{
 921              		.loc 1 454 5 is_stmt 1 view .LVU225
 454:Core/Src/main.c **** 				{
 922              		.loc 1 454 8 is_stmt 0 view .LVU226
 923 00ce 0F2B     		cmp	r3, #15
 924 00d0 02D9     		bls	.L73
 456:Core/Src/main.c **** 				}
 925              		.loc 1 456 6 is_stmt 1 view .LVU227
 456:Core/Src/main.c **** 				}
 926              		.loc 1 456 13 is_stmt 0 view .LVU228
 927 00d2 1346     		mov	r3, r2
 928 00d4 0A22     		movs	r2, #10
 929 00d6 1A70     		strb	r2, [r3]
 930              	.L73:
 458:Core/Src/main.c **** 
 931              		.loc 1 458 5 is_stmt 1 view .LVU229
 932 00d8 1E4B     		ldr	r3, .L83+16
 933 00da 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 934 00dc 3032     		adds	r2, r2, #48
 935 00de D2B2     		uxtb	r2, r2
 936 00e0 0121     		movs	r1, #1
 937 00e2 1020     		movs	r0, #16
 938 00e4 FFF7FEFF 		bl	RS485_Send_Message
 939              	.LVL40:
 460:Core/Src/main.c **** 
 940              		.loc 1 460 5 view .LVU230
 460:Core/Src/main.c **** 
 941              		.loc 1 460 11 is_stmt 0 view .LVU231
 942 00e8 184B     		ldr	r3, .L83+8
 943 00ea 0022     		movs	r2, #0
 944 00ec 1A70     		strb	r2, [r3]
 462:Core/Src/main.c **** 			case EVENT_RX_COMPLETE:
 945              		.loc 1 462 5 is_stmt 1 view .LVU232
 946 00ee A5E7     		b	.L59
 947              	.L69:
 465:Core/Src/main.c **** 				event = EVENT_RESET;
 948              		.loc 1 465 5 view .LVU233
 949 00f0 FFF7FEFF 		bl	RS485_Read_Message
 950              	.LVL41:
 466:Core/Src/main.c **** 				break;
 951              		.loc 1 466 5 view .LVU234
 466:Core/Src/main.c **** 				break;
ARM GAS  /tmp/ccrM433n.s 			page 30


 952              		.loc 1 466 11 is_stmt 0 view .LVU235
 953 00f4 154B     		ldr	r3, .L83+8
 954 00f6 0022     		movs	r2, #0
 955 00f8 1A70     		strb	r2, [r3]
 467:Core/Src/main.c **** 
 956              		.loc 1 467 5 is_stmt 1 view .LVU236
 957 00fa 9FE7     		b	.L59
 958              	.LVL42:
 959              	.L82:
 960              	.LBB4:
 473:Core/Src/main.c **** 					break;	
 961              		.loc 1 473 6 view .LVU237
 473:Core/Src/main.c **** 					break;	
 962              		.loc 1 473 30 is_stmt 0 view .LVU238
 963 00fc 40F01000 		orr	r0, r0, #16
 964              	.LVL43:
 473:Core/Src/main.c **** 					break;	
 965              		.loc 1 473 6 view .LVU239
 966 0100 FF22     		movs	r2, #255
 967 0102 0221     		movs	r1, #2
 968 0104 C0B2     		uxtb	r0, r0
 969 0106 FFF7FEFF 		bl	RS485_Send_Message
 970              	.LVL44:
 474:Core/Src/main.c **** 					}
 971              		.loc 1 474 6 is_stmt 1 view .LVU240
 972              	.L75:
 474:Core/Src/main.c **** 					}
 973              		.loc 1 474 6 is_stmt 0 view .LVU241
 974              	.LBE4:
 477:Core/Src/main.c **** 				if (f_querry==num_slave){
 975              		.loc 1 477 5 is_stmt 1 view .LVU242
 477:Core/Src/main.c **** 				if (f_querry==num_slave){
 976              		.loc 1 477 13 is_stmt 0 view .LVU243
 977 010a 144A     		ldr	r2, .L83+24
 978 010c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 979 010e 0133     		adds	r3, r3, #1
 980 0110 DBB2     		uxtb	r3, r3
 981 0112 1370     		strb	r3, [r2]
 478:Core/Src/main.c **** 					f_querry=0;
 982              		.loc 1 478 5 is_stmt 1 view .LVU244
 478:Core/Src/main.c **** 					f_querry=0;
 983              		.loc 1 478 17 is_stmt 0 view .LVU245
 984 0114 0E4A     		ldr	r2, .L83+12
 985 0116 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 478:Core/Src/main.c **** 					f_querry=0;
 986              		.loc 1 478 8 view .LVU246
 987 0118 9342     		cmp	r3, r2
 988 011a 0ED0     		beq	.L81
 989              	.L77:
 482:Core/Src/main.c **** 				break;
 990              		.loc 1 482 5 is_stmt 1 view .LVU247
 482:Core/Src/main.c **** 				break;
 991              		.loc 1 482 11 is_stmt 0 view .LVU248
 992 011c 0B4B     		ldr	r3, .L83+8
 993 011e 0022     		movs	r2, #0
 994 0120 1A70     		strb	r2, [r3]
 483:Core/Src/main.c **** 			}
ARM GAS  /tmp/ccrM433n.s 			page 31


 995              		.loc 1 483 5 is_stmt 1 view .LVU249
 492:Core/Src/main.c **** 
 996              		.loc 1 492 1 is_stmt 0 view .LVU250
 997 0122 8BE7     		b	.L59
 998              	.L78:
 492:Core/Src/main.c **** 
 999              		.loc 1 492 1 view .LVU251
 1000 0124 0020     		movs	r0, #0
 1001              	.L67:
 1002              	.LVL45:
 1003              	.LBB5:
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1004              		.loc 1 471 20 is_stmt 1 discriminator 1 view .LVU252
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1005              		.loc 1 471 22 is_stmt 0 discriminator 1 view .LVU253
 1006 0126 0A4B     		ldr	r3, .L83+12
 1007 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1008              		.loc 1 471 5 discriminator 1 view .LVU254
 1009 012a 8342     		cmp	r3, r0
 1010 012c EDDB     		blt	.L75
 472:Core/Src/main.c **** 					RS485_Send_Message((ADDR|i), FUNC_READ, 0xFF);
 1011              		.loc 1 472 6 is_stmt 1 view .LVU255
 472:Core/Src/main.c **** 					RS485_Send_Message((ADDR|i), FUNC_READ, 0xFF);
 1012              		.loc 1 472 18 is_stmt 0 view .LVU256
 1013 012e 0B4B     		ldr	r3, .L83+24
 1014 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 472:Core/Src/main.c **** 					RS485_Send_Message((ADDR|i), FUNC_READ, 0xFF);
 1015              		.loc 1 472 9 view .LVU257
 1016 0132 8342     		cmp	r3, r0
 1017 0134 E2D0     		beq	.L82
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1018              		.loc 1 471 35 is_stmt 1 discriminator 2 view .LVU258
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1019              		.loc 1 471 36 is_stmt 0 discriminator 2 view .LVU259
 1020 0136 0130     		adds	r0, r0, #1
 1021              	.LVL46:
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1022              		.loc 1 471 36 discriminator 2 view .LVU260
 1023 0138 F5E7     		b	.L67
 1024              	.LVL47:
 1025              	.L81:
 471:Core/Src/main.c **** 					if (f_querry==i) {
 1026              		.loc 1 471 36 discriminator 2 view .LVU261
 1027              	.LBE5:
 479:Core/Src/main.c **** 				}	
 1028              		.loc 1 479 6 is_stmt 1 view .LVU262
 479:Core/Src/main.c **** 				}	
 1029              		.loc 1 479 14 is_stmt 0 view .LVU263
 1030 013a 084B     		ldr	r3, .L83+24
 1031 013c 0022     		movs	r2, #0
 1032 013e 1A70     		strb	r2, [r3]
 1033 0140 ECE7     		b	.L77
 1034              	.L84:
 1035 0142 00BF     		.align	2
 1036              	.L83:
 1037 0144 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/ccrM433n.s 			page 32


 1038 0148 00000000 		.word	.LANCHOR22
 1039 014c 00000000 		.word	.LANCHOR23
 1040 0150 00000000 		.word	.LANCHOR24
 1041 0154 00000000 		.word	.LANCHOR8
 1042 0158 00000000 		.word	.LANCHOR6
 1043 015c 00000000 		.word	.LANCHOR25
 1044              		.cfi_endproc
 1045              	.LFE136:
 1047              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1048              		.align	1
 1049              		.global	HAL_TIM_PeriodElapsedCallback
 1050              		.syntax unified
 1051              		.thumb
 1052              		.thumb_func
 1053              		.fpu fpv4-sp-d16
 1055              	HAL_TIM_PeriodElapsedCallback:
 1056              	.LVL48:
 1057              	.LFB139:
 568:Core/Src/main.c **** 
 569:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 570:Core/Src/main.c **** {
 1058              		.loc 1 570 1 is_stmt 1 view -0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 571:Core/Src/main.c **** 	// Check which version of the timer triggered this callback and toggle LED
 572:Core/Src/main.c **** 
 573:Core/Src/main.c **** 	if (htim == &htim4)
 1063              		.loc 1 573 2 view .LVU265
 1064              		.loc 1 573 5 is_stmt 0 view .LVU266
 1065 0000 034B     		ldr	r3, .L88
 1066 0002 8342     		cmp	r3, r0
 1067 0004 00D0     		beq	.L87
 1068              	.L85:
 574:Core/Src/main.c **** 	{
 575:Core/Src/main.c **** 		f_timer_10ms = 1;
 576:Core/Src/main.c **** 	}
 577:Core/Src/main.c **** }
 1069              		.loc 1 577 1 view .LVU267
 1070 0006 7047     		bx	lr
 1071              	.L87:
 575:Core/Src/main.c **** 	}
 1072              		.loc 1 575 3 is_stmt 1 view .LVU268
 575:Core/Src/main.c **** 	}
 1073              		.loc 1 575 16 is_stmt 0 view .LVU269
 1074 0008 024B     		ldr	r3, .L88+4
 1075 000a 0122     		movs	r2, #1
 1076 000c 1A70     		strb	r2, [r3]
 1077              		.loc 1 577 1 view .LVU270
 1078 000e FAE7     		b	.L85
 1079              	.L89:
 1080              		.align	2
 1081              	.L88:
 1082 0010 00000000 		.word	htim4
 1083 0014 00000000 		.word	.LANCHOR9
 1084              		.cfi_endproc
ARM GAS  /tmp/ccrM433n.s 			page 33


 1085              	.LFE139:
 1087              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1088              		.align	1
 1089              		.global	HAL_UART_RxCpltCallback
 1090              		.syntax unified
 1091              		.thumb
 1092              		.thumb_func
 1093              		.fpu fpv4-sp-d16
 1095              	HAL_UART_RxCpltCallback:
 1096              	.LVL49:
 1097              	.LFB140:
 578:Core/Src/main.c **** 
 579:Core/Src/main.c **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 580:Core/Src/main.c **** {
 1098              		.loc 1 580 1 is_stmt 1 view -0
 1099              		.cfi_startproc
 1100              		@ args = 0, pretend = 0, frame = 0
 1101              		@ frame_needed = 0, uses_anonymous_args = 0
 1102              		.loc 1 580 1 is_stmt 0 view .LVU272
 1103 0000 08B5     		push	{r3, lr}
 1104              	.LCFI8:
 1105              		.cfi_def_cfa_offset 8
 1106              		.cfi_offset 3, -8
 1107              		.cfi_offset 14, -4
 581:Core/Src/main.c **** 	// HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 582:Core/Src/main.c **** 
 583:Core/Src/main.c **** 	if (huart == &huart4)
 1108              		.loc 1 583 2 is_stmt 1 view .LVU273
 1109              		.loc 1 583 5 is_stmt 0 view .LVU274
 1110 0002 144B     		ldr	r3, .L98
 1111 0004 8342     		cmp	r3, r0
 1112 0006 00D0     		beq	.L96
 1113              	.LVL50:
 1114              	.L90:
 584:Core/Src/main.c **** 	{
 585:Core/Src/main.c **** 
 586:Core/Src/main.c **** 		if (!transmission_f)
 587:Core/Src/main.c **** 		{
 588:Core/Src/main.c **** 			if (rx_temp == 0x2)
 589:Core/Src/main.c **** 			{
 590:Core/Src/main.c **** 				transmission_f = 1;
 591:Core/Src/main.c **** 			}
 592:Core/Src/main.c **** 		}
 593:Core/Src/main.c **** 		else
 594:Core/Src/main.c **** 		{
 595:Core/Src/main.c **** 			if (rx_temp == 0x3)
 596:Core/Src/main.c **** 			{ // digit1= 2;
 597:Core/Src/main.c **** 				transmission_f = 0;
 598:Core/Src/main.c **** 				buffer_push(&event_buffer, EVENT_RX_COMPLETE);
 599:Core/Src/main.c **** 				HAL_UART_Receive_IT(&huart4, &rx_temp, 1);
 600:Core/Src/main.c **** 				return;
 601:Core/Src/main.c **** 			}
 602:Core/Src/main.c **** 
 603:Core/Src/main.c **** 			buffer_push(&rx2_buffer, rx_temp);
 604:Core/Src/main.c **** 		}
 605:Core/Src/main.c **** 
 606:Core/Src/main.c **** 		HAL_UART_Receive_IT(&huart4, &rx_temp, 1);
ARM GAS  /tmp/ccrM433n.s 			page 34


 607:Core/Src/main.c **** 	}
 608:Core/Src/main.c **** }
 1115              		.loc 1 608 1 view .LVU275
 1116 0008 08BD     		pop	{r3, pc}
 1117              	.LVL51:
 1118              	.L96:
 586:Core/Src/main.c **** 		{
 1119              		.loc 1 586 3 is_stmt 1 view .LVU276
 586:Core/Src/main.c **** 		{
 1120              		.loc 1 586 7 is_stmt 0 view .LVU277
 1121 000a 134B     		ldr	r3, .L98+4
 1122 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586:Core/Src/main.c **** 		{
 1123              		.loc 1 586 6 view .LVU278
 1124 000e 3BB9     		cbnz	r3, .L92
 588:Core/Src/main.c **** 			{
 1125              		.loc 1 588 4 is_stmt 1 view .LVU279
 588:Core/Src/main.c **** 			{
 1126              		.loc 1 588 16 is_stmt 0 view .LVU280
 1127 0010 124B     		ldr	r3, .L98+8
 1128 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588:Core/Src/main.c **** 			{
 1129              		.loc 1 588 7 view .LVU281
 1130 0014 022B     		cmp	r3, #2
 1131 0016 0AD1     		bne	.L93
 590:Core/Src/main.c **** 			}
 1132              		.loc 1 590 5 is_stmt 1 view .LVU282
 590:Core/Src/main.c **** 			}
 1133              		.loc 1 590 20 is_stmt 0 view .LVU283
 1134 0018 0F4B     		ldr	r3, .L98+4
 1135 001a 0122     		movs	r2, #1
 1136 001c 1A70     		strb	r2, [r3]
 1137 001e 06E0     		b	.L93
 1138              	.L92:
 595:Core/Src/main.c **** 			{ // digit1= 2;
 1139              		.loc 1 595 4 is_stmt 1 view .LVU284
 595:Core/Src/main.c **** 			{ // digit1= 2;
 1140              		.loc 1 595 16 is_stmt 0 view .LVU285
 1141 0020 0E4B     		ldr	r3, .L98+8
 1142 0022 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 595:Core/Src/main.c **** 			{ // digit1= 2;
 1143              		.loc 1 595 7 view .LVU286
 1144 0024 0329     		cmp	r1, #3
 1145 0026 08D0     		beq	.L97
 603:Core/Src/main.c **** 		}
 1146              		.loc 1 603 4 is_stmt 1 view .LVU287
 1147 0028 0D48     		ldr	r0, .L98+12
 1148              	.LVL52:
 603:Core/Src/main.c **** 		}
 1149              		.loc 1 603 4 is_stmt 0 view .LVU288
 1150 002a FFF7FEFF 		bl	buffer_push
 1151              	.LVL53:
 1152              	.L93:
 606:Core/Src/main.c **** 	}
 1153              		.loc 1 606 3 is_stmt 1 view .LVU289
 1154 002e 0122     		movs	r2, #1
 1155 0030 0A49     		ldr	r1, .L98+8
ARM GAS  /tmp/ccrM433n.s 			page 35


 1156 0032 0848     		ldr	r0, .L98
 1157 0034 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1158              	.LVL54:
 1159 0038 E6E7     		b	.L90
 1160              	.LVL55:
 1161              	.L97:
 597:Core/Src/main.c **** 				buffer_push(&event_buffer, EVENT_RX_COMPLETE);
 1162              		.loc 1 597 5 view .LVU290
 597:Core/Src/main.c **** 				buffer_push(&event_buffer, EVENT_RX_COMPLETE);
 1163              		.loc 1 597 20 is_stmt 0 view .LVU291
 1164 003a 074B     		ldr	r3, .L98+4
 1165 003c 0022     		movs	r2, #0
 1166 003e 1A70     		strb	r2, [r3]
 598:Core/Src/main.c **** 				HAL_UART_Receive_IT(&huart4, &rx_temp, 1);
 1167              		.loc 1 598 5 is_stmt 1 view .LVU292
 1168 0040 0521     		movs	r1, #5
 1169 0042 0848     		ldr	r0, .L98+16
 1170              	.LVL56:
 598:Core/Src/main.c **** 				HAL_UART_Receive_IT(&huart4, &rx_temp, 1);
 1171              		.loc 1 598 5 is_stmt 0 view .LVU293
 1172 0044 FFF7FEFF 		bl	buffer_push
 1173              	.LVL57:
 599:Core/Src/main.c **** 				return;
 1174              		.loc 1 599 5 is_stmt 1 view .LVU294
 1175 0048 0122     		movs	r2, #1
 1176 004a 0449     		ldr	r1, .L98+8
 1177 004c 0148     		ldr	r0, .L98
 1178 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 1179              	.LVL58:
 600:Core/Src/main.c **** 			}
 1180              		.loc 1 600 5 view .LVU295
 1181 0052 D9E7     		b	.L90
 1182              	.L99:
 1183              		.align	2
 1184              	.L98:
 1185 0054 00000000 		.word	huart4
 1186 0058 00000000 		.word	.LANCHOR26
 1187 005c 00000000 		.word	.LANCHOR27
 1188 0060 00000000 		.word	.LANCHOR20
 1189 0064 00000000 		.word	.LANCHOR14
 1190              		.cfi_endproc
 1191              	.LFE140:
 1193              		.section	.text.Error_Handler,"ax",%progbits
 1194              		.align	1
 1195              		.global	Error_Handler
 1196              		.syntax unified
 1197              		.thumb
 1198              		.thumb_func
 1199              		.fpu fpv4-sp-d16
 1201              	Error_Handler:
 1202              	.LFB141:
 609:Core/Src/main.c **** /* USER CODE END 4 */
 610:Core/Src/main.c **** 
 611:Core/Src/main.c **** /**
 612:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 613:Core/Src/main.c ****  * @retval None
 614:Core/Src/main.c ****  */
ARM GAS  /tmp/ccrM433n.s 			page 36


 615:Core/Src/main.c **** void Error_Handler(void)
 616:Core/Src/main.c **** {
 1203              		.loc 1 616 1 view -0
 1204              		.cfi_startproc
 1205              		@ Volatile: function does not return.
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              		@ link register save eliminated.
 617:Core/Src/main.c **** 	/* USER CODE BEGIN Error_Handler_Debug */
 618:Core/Src/main.c **** 	/* User can add his own implementation to report the HAL error return state */
 619:Core/Src/main.c **** 	__disable_irq();
 1209              		.loc 1 619 2 view .LVU297
 1210              	.LBB6:
 1211              	.LBI6:
 1212              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccrM433n.s 			page 37


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccrM433n.s 			page 38


 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1213              		.loc 2 140 27 view .LVU298
 1214              	.LBB7:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1215              		.loc 2 142 3 view .LVU299
 1216              		.syntax unified
 1217              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1218 0000 72B6     		cpsid i
 1219              	@ 0 "" 2
 1220              		.thumb
 1221              		.syntax unified
 1222              	.L101:
 1223              	.LBE7:
 1224              	.LBE6:
 620:Core/Src/main.c **** 	while (1)
 1225              		.loc 1 620 2 discriminator 1 view .LVU300
ARM GAS  /tmp/ccrM433n.s 			page 39


 621:Core/Src/main.c **** 	{
 622:Core/Src/main.c **** 	}
 1226              		.loc 1 622 2 discriminator 1 view .LVU301
 620:Core/Src/main.c **** 	while (1)
 1227              		.loc 1 620 8 discriminator 1 view .LVU302
 1228 0002 FEE7     		b	.L101
 1229              		.cfi_endproc
 1230              	.LFE141:
 1232              		.section	.text.SystemClock_Config,"ax",%progbits
 1233              		.align	1
 1234              		.global	SystemClock_Config
 1235              		.syntax unified
 1236              		.thumb
 1237              		.thumb_func
 1238              		.fpu fpv4-sp-d16
 1240              	SystemClock_Config:
 1241              	.LFB131:
 213:Core/Src/main.c **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1242              		.loc 1 213 1 view -0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 80
 1245              		@ frame_needed = 0, uses_anonymous_args = 0
 1246 0000 00B5     		push	{lr}
 1247              	.LCFI9:
 1248              		.cfi_def_cfa_offset 4
 1249              		.cfi_offset 14, -4
 1250 0002 95B0     		sub	sp, sp, #84
 1251              	.LCFI10:
 1252              		.cfi_def_cfa_offset 88
 214:Core/Src/main.c **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1253              		.loc 1 214 2 view .LVU304
 214:Core/Src/main.c **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1254              		.loc 1 214 21 is_stmt 0 view .LVU305
 1255 0004 3022     		movs	r2, #48
 1256 0006 0021     		movs	r1, #0
 1257 0008 08A8     		add	r0, sp, #32
 1258 000a FFF7FEFF 		bl	memset
 1259              	.LVL59:
 215:Core/Src/main.c **** 
 1260              		.loc 1 215 2 is_stmt 1 view .LVU306
 215:Core/Src/main.c **** 
 1261              		.loc 1 215 21 is_stmt 0 view .LVU307
 1262 000e 0023     		movs	r3, #0
 1263 0010 0393     		str	r3, [sp, #12]
 1264 0012 0493     		str	r3, [sp, #16]
 1265 0014 0593     		str	r3, [sp, #20]
 1266 0016 0693     		str	r3, [sp, #24]
 1267 0018 0793     		str	r3, [sp, #28]
 219:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1268              		.loc 1 219 2 is_stmt 1 view .LVU308
 1269              	.LBB8:
 219:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1270              		.loc 1 219 2 view .LVU309
 1271 001a 0193     		str	r3, [sp, #4]
 219:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1272              		.loc 1 219 2 view .LVU310
 1273 001c 204A     		ldr	r2, .L108
ARM GAS  /tmp/ccrM433n.s 			page 40


 1274 001e 116C     		ldr	r1, [r2, #64]
 1275 0020 41F08051 		orr	r1, r1, #268435456
 1276 0024 1164     		str	r1, [r2, #64]
 219:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1277              		.loc 1 219 2 view .LVU311
 1278 0026 126C     		ldr	r2, [r2, #64]
 1279 0028 02F08052 		and	r2, r2, #268435456
 1280 002c 0192     		str	r2, [sp, #4]
 219:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1281              		.loc 1 219 2 view .LVU312
 1282 002e 019A     		ldr	r2, [sp, #4]
 1283              	.LBE8:
 219:Core/Src/main.c **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1284              		.loc 1 219 2 view .LVU313
 220:Core/Src/main.c **** 
 1285              		.loc 1 220 2 view .LVU314
 1286              	.LBB9:
 220:Core/Src/main.c **** 
 1287              		.loc 1 220 2 view .LVU315
 1288 0030 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c **** 
 1289              		.loc 1 220 2 view .LVU316
 1290 0032 1C4A     		ldr	r2, .L108+4
 1291 0034 1368     		ldr	r3, [r2]
 1292 0036 23F44043 		bic	r3, r3, #49152
 1293 003a 43F48043 		orr	r3, r3, #16384
 1294 003e 1360     		str	r3, [r2]
 220:Core/Src/main.c **** 
 1295              		.loc 1 220 2 view .LVU317
 1296 0040 1368     		ldr	r3, [r2]
 1297 0042 03F44043 		and	r3, r3, #49152
 1298 0046 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c **** 
 1299              		.loc 1 220 2 view .LVU318
 1300 0048 029B     		ldr	r3, [sp, #8]
 1301              	.LBE9:
 220:Core/Src/main.c **** 
 1302              		.loc 1 220 2 view .LVU319
 225:Core/Src/main.c **** 	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1303              		.loc 1 225 2 view .LVU320
 225:Core/Src/main.c **** 	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1304              		.loc 1 225 35 is_stmt 0 view .LVU321
 1305 004a 0123     		movs	r3, #1
 1306 004c 0893     		str	r3, [sp, #32]
 226:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1307              		.loc 1 226 2 is_stmt 1 view .LVU322
 226:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1308              		.loc 1 226 29 is_stmt 0 view .LVU323
 1309 004e 4FF48033 		mov	r3, #65536
 1310 0052 0993     		str	r3, [sp, #36]
 227:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1311              		.loc 1 227 2 is_stmt 1 view .LVU324
 227:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1312              		.loc 1 227 33 is_stmt 0 view .LVU325
 1313 0054 0223     		movs	r3, #2
 1314 0056 0E93     		str	r3, [sp, #56]
 228:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLM = 4;
ARM GAS  /tmp/ccrM433n.s 			page 41


 1315              		.loc 1 228 2 is_stmt 1 view .LVU326
 228:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLM = 4;
 1316              		.loc 1 228 34 is_stmt 0 view .LVU327
 1317 0058 4FF48002 		mov	r2, #4194304
 1318 005c 0F92     		str	r2, [sp, #60]
 229:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLN = 96;
 1319              		.loc 1 229 2 is_stmt 1 view .LVU328
 229:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLN = 96;
 1320              		.loc 1 229 29 is_stmt 0 view .LVU329
 1321 005e 0422     		movs	r2, #4
 1322 0060 1092     		str	r2, [sp, #64]
 230:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1323              		.loc 1 230 2 is_stmt 1 view .LVU330
 230:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1324              		.loc 1 230 29 is_stmt 0 view .LVU331
 1325 0062 6022     		movs	r2, #96
 1326 0064 1192     		str	r2, [sp, #68]
 231:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLQ = 3;
 1327              		.loc 1 231 2 is_stmt 1 view .LVU332
 231:Core/Src/main.c **** 	RCC_OscInitStruct.PLL.PLLQ = 3;
 1328              		.loc 1 231 29 is_stmt 0 view .LVU333
 1329 0066 1293     		str	r3, [sp, #72]
 232:Core/Src/main.c **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1330              		.loc 1 232 2 is_stmt 1 view .LVU334
 232:Core/Src/main.c **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1331              		.loc 1 232 29 is_stmt 0 view .LVU335
 1332 0068 0323     		movs	r3, #3
 1333 006a 1393     		str	r3, [sp, #76]
 233:Core/Src/main.c **** 	{
 1334              		.loc 1 233 2 is_stmt 1 view .LVU336
 233:Core/Src/main.c **** 	{
 1335              		.loc 1 233 6 is_stmt 0 view .LVU337
 1336 006c 08A8     		add	r0, sp, #32
 1337 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1338              	.LVL60:
 233:Core/Src/main.c **** 	{
 1339              		.loc 1 233 5 view .LVU338
 1340 0072 88B9     		cbnz	r0, .L106
 240:Core/Src/main.c **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1341              		.loc 1 240 2 is_stmt 1 view .LVU339
 240:Core/Src/main.c **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1342              		.loc 1 240 30 is_stmt 0 view .LVU340
 1343 0074 0F23     		movs	r3, #15
 1344 0076 0393     		str	r3, [sp, #12]
 241:Core/Src/main.c **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 1345              		.loc 1 241 2 is_stmt 1 view .LVU341
 241:Core/Src/main.c **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 1346              		.loc 1 241 33 is_stmt 0 view .LVU342
 1347 0078 0223     		movs	r3, #2
 1348 007a 0493     		str	r3, [sp, #16]
 242:Core/Src/main.c **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1349              		.loc 1 242 2 is_stmt 1 view .LVU343
 242:Core/Src/main.c **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1350              		.loc 1 242 34 is_stmt 0 view .LVU344
 1351 007c 8023     		movs	r3, #128
 1352 007e 0593     		str	r3, [sp, #20]
 243:Core/Src/main.c **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
ARM GAS  /tmp/ccrM433n.s 			page 42


 1353              		.loc 1 243 2 is_stmt 1 view .LVU345
 243:Core/Src/main.c **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1354              		.loc 1 243 35 is_stmt 0 view .LVU346
 1355 0080 4FF48053 		mov	r3, #4096
 1356 0084 0693     		str	r3, [sp, #24]
 244:Core/Src/main.c **** 
 1357              		.loc 1 244 2 is_stmt 1 view .LVU347
 244:Core/Src/main.c **** 
 1358              		.loc 1 244 35 is_stmt 0 view .LVU348
 1359 0086 0793     		str	r3, [sp, #28]
 246:Core/Src/main.c **** 	{
 1360              		.loc 1 246 2 is_stmt 1 view .LVU349
 246:Core/Src/main.c **** 	{
 1361              		.loc 1 246 6 is_stmt 0 view .LVU350
 1362 0088 0121     		movs	r1, #1
 1363 008a 03A8     		add	r0, sp, #12
 1364 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1365              	.LVL61:
 246:Core/Src/main.c **** 	{
 1366              		.loc 1 246 5 view .LVU351
 1367 0090 20B9     		cbnz	r0, .L107
 250:Core/Src/main.c **** 
 1368              		.loc 1 250 1 view .LVU352
 1369 0092 15B0     		add	sp, sp, #84
 1370              	.LCFI11:
 1371              		.cfi_remember_state
 1372              		.cfi_def_cfa_offset 4
 1373              		@ sp needed
 1374 0094 5DF804FB 		ldr	pc, [sp], #4
 1375              	.L106:
 1376              	.LCFI12:
 1377              		.cfi_restore_state
 235:Core/Src/main.c **** 	}
 1378              		.loc 1 235 3 is_stmt 1 view .LVU353
 1379 0098 FFF7FEFF 		bl	Error_Handler
 1380              	.LVL62:
 1381              	.L107:
 248:Core/Src/main.c **** 	}
 1382              		.loc 1 248 3 view .LVU354
 1383 009c FFF7FEFF 		bl	Error_Handler
 1384              	.LVL63:
 1385              	.L109:
 1386              		.align	2
 1387              	.L108:
 1388 00a0 00380240 		.word	1073887232
 1389 00a4 00700040 		.word	1073770496
 1390              		.cfi_endproc
 1391              	.LFE131:
 1393              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1394              		.align	2
 1395              	.LC0:
 1396 0000 54455452 		.ascii	"TETRADYNE\000"
 1396      4144594E 
 1396      4500
 1397 000a 0000     		.align	2
 1398              	.LC1:
 1399 000c 53323A00 		.ascii	"S2:\000"
ARM GAS  /tmp/ccrM433n.s 			page 43


 1400              		.align	2
 1401              	.LC2:
 1402 0010 53313A00 		.ascii	"S1:\000"
 1403              		.section	.text.main,"ax",%progbits
 1404              		.align	1
 1405              		.global	main
 1406              		.syntax unified
 1407              		.thumb
 1408              		.thumb_func
 1409              		.fpu fpv4-sp-d16
 1411              	main:
 1412              	.LFB130:
 137:Core/Src/main.c **** 	/* USER CODE BEGIN 1 */
 1413              		.loc 1 137 1 view -0
 1414              		.cfi_startproc
 1415              		@ Volatile: function does not return.
 1416              		@ args = 0, pretend = 0, frame = 0
 1417              		@ frame_needed = 0, uses_anonymous_args = 0
 1418 0000 08B5     		push	{r3, lr}
 1419              	.LCFI13:
 1420              		.cfi_def_cfa_offset 8
 1421              		.cfi_offset 3, -8
 1422              		.cfi_offset 14, -4
 145:Core/Src/main.c **** 
 1423              		.loc 1 145 2 view .LVU356
 1424 0002 FFF7FEFF 		bl	HAL_Init
 1425              	.LVL64:
 152:Core/Src/main.c **** 
 1426              		.loc 1 152 2 view .LVU357
 1427 0006 FFF7FEFF 		bl	SystemClock_Config
 1428              	.LVL65:
 159:Core/Src/main.c **** 	MX_TIM4_Init();
 1429              		.loc 1 159 2 view .LVU358
 1430 000a FFF7FEFF 		bl	MX_GPIO_Init
 1431              	.LVL66:
 160:Core/Src/main.c **** 	MX_UART4_Init();
 1432              		.loc 1 160 2 view .LVU359
 1433 000e FFF7FEFF 		bl	MX_TIM4_Init
 1434              	.LVL67:
 161:Core/Src/main.c **** 	MX_UART5_Init();
 1435              		.loc 1 161 2 view .LVU360
 1436 0012 FFF7FEFF 		bl	MX_UART4_Init
 1437              	.LVL68:
 162:Core/Src/main.c **** 	/* USER CODE BEGIN 2 */
 1438              		.loc 1 162 2 view .LVU361
 1439 0016 FFF7FEFF 		bl	MX_UART5_Init
 1440              	.LVL69:
 165:Core/Src/main.c **** 
 1441              		.loc 1 165 2 view .LVU362
 1442 001a 1C48     		ldr	r0, .L113
 1443 001c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1444              	.LVL70:
 167:Core/Src/main.c **** 	// HAL_GPIO_WritePin(TX2_EN_GPIO_Port, TX2_EN_Pin, 0);	// Enable Receiver 2
 1445              		.loc 1 167 2 view .LVU363
 1446 0020 0022     		movs	r2, #0
 1447 0022 4FF48051 		mov	r1, #4096
 1448 0026 1A48     		ldr	r0, .L113+4
ARM GAS  /tmp/ccrM433n.s 			page 44


 1449 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 1450              	.LVL71:
 170:Core/Src/main.c **** 	// HAL_UART_Receive_IT(&huart5, &rx2_buffer.data[rx2_buffer.head], 1);
 1451              		.loc 1 170 2 view .LVU364
 1452 002c 0122     		movs	r2, #1
 1453 002e 1949     		ldr	r1, .L113+8
 1454 0030 1948     		ldr	r0, .L113+12
 1455 0032 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1456              	.LVL72:
 173:Core/Src/main.c **** 	digit2 = 16;
 1457              		.loc 1 173 2 view .LVU365
 173:Core/Src/main.c **** 	digit2 = 16;
 1458              		.loc 1 173 9 is_stmt 0 view .LVU366
 1459 0036 1023     		movs	r3, #16
 1460 0038 184A     		ldr	r2, .L113+16
 1461 003a 1370     		strb	r3, [r2]
 174:Core/Src/main.c **** 	num_slave=0;
 1462              		.loc 1 174 2 is_stmt 1 view .LVU367
 174:Core/Src/main.c **** 	num_slave=0;
 1463              		.loc 1 174 9 is_stmt 0 view .LVU368
 1464 003c 184A     		ldr	r2, .L113+20
 1465 003e 1370     		strb	r3, [r2]
 175:Core/Src/main.c **** 	if (num_slave>0){
 1466              		.loc 1 175 2 is_stmt 1 view .LVU369
 175:Core/Src/main.c **** 	if (num_slave>0){
 1467              		.loc 1 175 11 is_stmt 0 view .LVU370
 1468 0040 0024     		movs	r4, #0
 1469 0042 184B     		ldr	r3, .L113+24
 1470 0044 1C70     		strb	r4, [r3]
 176:Core/Src/main.c **** 		state = STATE_OPERATION;
 1471              		.loc 1 176 2 is_stmt 1 view .LVU371
 180:Core/Src/main.c **** 	lcd_clear();
 1472              		.loc 1 180 2 view .LVU372
 1473 0046 FFF7FEFF 		bl	lcd_init
 1474              	.LVL73:
 181:Core/Src/main.c **** 	lcd_set_pos(0, 3);
 1475              		.loc 1 181 2 view .LVU373
 1476 004a FFF7FEFF 		bl	lcd_clear
 1477              	.LVL74:
 182:Core/Src/main.c **** 	lcd_write_string("TETRADYNE");
 1478              		.loc 1 182 2 view .LVU374
 1479 004e 0321     		movs	r1, #3
 1480 0050 2046     		mov	r0, r4
 1481 0052 FFF7FEFF 		bl	lcd_set_pos
 1482              	.LVL75:
 183:Core/Src/main.c **** 	lcd_set_pos(1, 0);
 1483              		.loc 1 183 2 view .LVU375
 1484 0056 1448     		ldr	r0, .L113+28
 1485 0058 FFF7FEFF 		bl	lcd_write_string
 1486              	.LVL76:
 184:Core/Src/main.c **** 	lcd_write_string("S2:");
 1487              		.loc 1 184 2 view .LVU376
 1488 005c 2146     		mov	r1, r4
 1489 005e 0120     		movs	r0, #1
 1490 0060 FFF7FEFF 		bl	lcd_set_pos
 1491              	.LVL77:
 185:Core/Src/main.c **** 	lcd_set_pos(1, 0xC);
ARM GAS  /tmp/ccrM433n.s 			page 45


 1492              		.loc 1 185 2 view .LVU377
 1493 0064 1148     		ldr	r0, .L113+32
 1494 0066 FFF7FEFF 		bl	lcd_write_string
 1495              	.LVL78:
 186:Core/Src/main.c **** 	lcd_write_string("S1:");
 1496              		.loc 1 186 2 view .LVU378
 1497 006a 0C21     		movs	r1, #12
 1498 006c 0120     		movs	r0, #1
 1499 006e FFF7FEFF 		bl	lcd_set_pos
 1500              	.LVL79:
 187:Core/Src/main.c **** 	/* USER CODE END 2 */
 1501              		.loc 1 187 2 view .LVU379
 1502 0072 0F48     		ldr	r0, .L113+36
 1503 0074 FFF7FEFF 		bl	lcd_write_string
 1504              	.LVL80:
 1505              	.L111:
 192:Core/Src/main.c **** 	{
 1506              		.loc 1 192 2 discriminator 1 view .LVU380
 198:Core/Src/main.c **** 		/// segment_display_task();
 1507              		.loc 1 198 3 discriminator 1 view .LVU381
 1508 0078 FFF7FEFF 		bl	task_timer
 1509              	.LVL81:
 200:Core/Src/main.c **** 		key_read_task();
 1510              		.loc 1 200 3 discriminator 1 view .LVU382
 1511 007c FFF7FEFF 		bl	lcd_display_task
 1512              	.LVL82:
 201:Core/Src/main.c **** 
 1513              		.loc 1 201 3 discriminator 1 view .LVU383
 1514 0080 FFF7FEFF 		bl	key_read_task
 1515              	.LVL83:
 203:Core/Src/main.c **** 	}
 1516              		.loc 1 203 3 discriminator 1 view .LVU384
 1517 0084 FFF7FEFF 		bl	main_task
 1518              	.LVL84:
 192:Core/Src/main.c **** 	{
 1519              		.loc 1 192 8 discriminator 1 view .LVU385
 1520 0088 F6E7     		b	.L111
 1521              	.L114:
 1522 008a 00BF     		.align	2
 1523              	.L113:
 1524 008c 00000000 		.word	htim4
 1525 0090 00000240 		.word	1073872896
 1526 0094 00000000 		.word	.LANCHOR27
 1527 0098 00000000 		.word	huart4
 1528 009c 00000000 		.word	.LANCHOR8
 1529 00a0 00000000 		.word	.LANCHOR6
 1530 00a4 00000000 		.word	.LANCHOR24
 1531 00a8 00000000 		.word	.LC0
 1532 00ac 0C000000 		.word	.LC1
 1533 00b0 10000000 		.word	.LC2
 1534              		.cfi_endproc
 1535              	.LFE130:
 1537              		.global	RX_msg
 1538              		.global	TX_msg
 1539              		.global	ID
 1540              		.global	event_buffer
 1541              		.global	rx2_buffer
ARM GAS  /tmp/ccrM433n.s 			page 46


 1542              		.global	rx1_buffer
 1543              		.global	stop_cmd
 1544              		.global	start_cmd
 1545              		.global	transmission_f
 1546              		.global	rx_temp
 1547              		.global	digit_table
 1548              		.global	lcd_process
 1549              		.global	data
 1550              		.global	cmd
 1551              		.global	digit2_update
 1552              		.global	digit1_update
 1553              		.global	lcd_digit1_f
 1554              		.global	is_EN
 1555              		.global	digit2
 1556              		.global	digit1
 1557              		.global	num_slave
 1558              		.global	error
 1559              		.global	event
 1560              		.global	state
 1561              		.global	key2_data
 1562              		.global	key1_data
 1563              		.global	TX2_delay_val
 1564              		.global	d_timer_TX2
 1565              		.global	TX1_delay_val
 1566              		.global	d_timer_TX1
 1567              		.global	d_timer_20ms
 1568              		.global	d_timer_50ms
 1569              		.global	d_timer_30ms
 1570              		.global	tx1_buffer
 1571              		.global	tx2_buffer
 1572              		.global	flag_digit_1
 1573              		.global	f_querry
 1574              		.global	f_timer_50ms
 1575              		.global	f_timer_30ms
 1576              		.global	f_timer_20ms
 1577              		.global	f_timer_10ms
 1578              		.global	f_seg_timer_500ms
 1579              		.global	f_timer_TX
 1580              		.global	f_busy
 1581              		.section	.bss.ID,"aw",%nobits
 1584              	ID:
 1585 0000 00       		.space	1
 1586              		.section	.bss.RX_msg,"aw",%nobits
 1587              		.align	2
 1588              		.set	.LANCHOR21,. + 0
 1591              	RX_msg:
 1592 0000 00000000 		.space	4
 1593              		.section	.bss.TX_msg,"aw",%nobits
 1594              		.align	2
 1595              		.set	.LANCHOR17,. + 0
 1598              	TX_msg:
 1599 0000 00000000 		.space	4
 1600              		.section	.bss.cmd,"aw",%nobits
 1601              		.set	.LANCHOR4,. + 0
 1604              	cmd:
 1605 0000 00       		.space	1
 1606              		.section	.bss.d_timer_20ms,"aw",%nobits
ARM GAS  /tmp/ccrM433n.s 			page 47


 1607              		.set	.LANCHOR12,. + 0
 1610              	d_timer_20ms:
 1611 0000 00       		.space	1
 1612              		.section	.bss.d_timer_30ms,"aw",%nobits
 1613              		.set	.LANCHOR10,. + 0
 1616              	d_timer_30ms:
 1617 0000 00       		.space	1
 1618              		.section	.bss.d_timer_50ms,"aw",%nobits
 1619              		.set	.LANCHOR13,. + 0
 1622              	d_timer_50ms:
 1623 0000 00       		.space	1
 1624              		.section	.bss.d_timer_TX1,"aw",%nobits
 1627              	d_timer_TX1:
 1628 0000 00       		.space	1
 1629              		.section	.bss.d_timer_TX2,"aw",%nobits
 1632              	d_timer_TX2:
 1633 0000 00       		.space	1
 1634              		.section	.bss.data,"aw",%nobits
 1635              		.set	.LANCHOR7,. + 0
 1638              	data:
 1639 0000 00       		.space	1
 1640              		.section	.bss.digit1,"aw",%nobits
 1641              		.set	.LANCHOR8,. + 0
 1644              	digit1:
 1645 0000 00       		.space	1
 1646              		.section	.bss.digit1_update,"aw",%nobits
 1649              	digit1_update:
 1650 0000 00       		.space	1
 1651              		.section	.bss.digit2,"aw",%nobits
 1652              		.set	.LANCHOR6,. + 0
 1655              	digit2:
 1656 0000 00       		.space	1
 1657              		.section	.bss.digit2_update,"aw",%nobits
 1660              	digit2_update:
 1661 0000 00       		.space	1
 1662              		.section	.bss.error,"aw",%nobits
 1665              	error:
 1666 0000 00       		.space	1
 1667              		.section	.bss.event,"aw",%nobits
 1668              		.set	.LANCHOR23,. + 0
 1671              	event:
 1672 0000 00       		.space	1
 1673              		.section	.bss.event_buffer,"aw",%nobits
 1674              		.align	2
 1675              		.set	.LANCHOR14,. + 0
 1678              	event_buffer:
 1679 0000 00000000 		.space	66
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1679      00000000 
 1680              		.section	.bss.f_busy,"aw",%nobits
 1683              	f_busy:
 1684 0000 00       		.space	1
 1685              		.section	.bss.f_querry,"aw",%nobits
 1686              		.set	.LANCHOR25,. + 0
 1689              	f_querry:
ARM GAS  /tmp/ccrM433n.s 			page 48


 1690 0000 00       		.space	1
 1691              		.section	.bss.f_seg_timer_500ms,"aw",%nobits
 1694              	f_seg_timer_500ms:
 1695 0000 00       		.space	1
 1696              		.section	.bss.f_timer_10ms,"aw",%nobits
 1697              		.set	.LANCHOR9,. + 0
 1700              	f_timer_10ms:
 1701 0000 00       		.space	1
 1702              		.section	.bss.f_timer_20ms,"aw",%nobits
 1703              		.set	.LANCHOR0,. + 0
 1706              	f_timer_20ms:
 1707 0000 00       		.space	1
 1708              		.section	.bss.f_timer_30ms,"aw",%nobits
 1709              		.set	.LANCHOR11,. + 0
 1712              	f_timer_30ms:
 1713 0000 00       		.space	1
 1714              		.section	.bss.f_timer_50ms,"aw",%nobits
 1717              	f_timer_50ms:
 1718 0000 00       		.space	1
 1719              		.section	.bss.f_timer_TX,"aw",%nobits
 1722              	f_timer_TX:
 1723 0000 00       		.space	1
 1724              		.section	.bss.is_EN,"aw",%nobits
 1725              		.set	.LANCHOR1,. + 0
 1728              	is_EN:
 1729 0000 00       		.space	1
 1730              		.section	.bss.key1_data,"aw",%nobits
 1731              		.set	.LANCHOR15,. + 0
 1734              	key1_data:
 1735 0000 00       		.space	1
 1736              		.section	.bss.key2_data,"aw",%nobits
 1737              		.set	.LANCHOR16,. + 0
 1740              	key2_data:
 1741 0000 00       		.space	1
 1742              		.section	.bss.lcd_digit1_f,"aw",%nobits
 1743              		.set	.LANCHOR3,. + 0
 1746              	lcd_digit1_f:
 1747 0000 00       		.space	1
 1748              		.section	.bss.lcd_process,"aw",%nobits
 1749              		.set	.LANCHOR2,. + 0
 1752              	lcd_process:
 1753 0000 00       		.space	1
 1754              		.section	.bss.num_slave,"aw",%nobits
 1755              		.set	.LANCHOR24,. + 0
 1758              	num_slave:
 1759 0000 00       		.space	1
 1760              		.section	.bss.rx1_buffer,"aw",%nobits
 1761              		.align	2
 1764              	rx1_buffer:
 1765 0000 00000000 		.space	66
 1765      00000000 
 1765      00000000 
 1765      00000000 
 1765      00000000 
 1766              		.section	.bss.rx2_buffer,"aw",%nobits
 1767              		.align	2
 1768              		.set	.LANCHOR20,. + 0
ARM GAS  /tmp/ccrM433n.s 			page 49


 1771              	rx2_buffer:
 1772 0000 00000000 		.space	66
 1772      00000000 
 1772      00000000 
 1772      00000000 
 1772      00000000 
 1773              		.section	.bss.rx_temp,"aw",%nobits
 1774              		.set	.LANCHOR27,. + 0
 1777              	rx_temp:
 1778 0000 00       		.space	1
 1779              		.section	.bss.state,"aw",%nobits
 1780              		.set	.LANCHOR22,. + 0
 1783              	state:
 1784 0000 00       		.space	1
 1785              		.section	.bss.transmission_f,"aw",%nobits
 1786              		.set	.LANCHOR26,. + 0
 1789              	transmission_f:
 1790 0000 00       		.space	1
 1791              		.section	.data.TX1_delay_val,"aw"
 1794              	TX1_delay_val:
 1795 0000 FA       		.byte	-6
 1796              		.section	.data.TX2_delay_val,"aw"
 1799              	TX2_delay_val:
 1800 0000 FA       		.byte	-6
 1801              		.section	.data.digit_table,"aw"
 1802              		.align	2
 1803              		.set	.LANCHOR5,. + 0
 1806              	digit_table:
 1807 0000 30313233 		.ascii	"0123456789abcdef-"
 1807      34353637 
 1807      38396162 
 1807      63646566 
 1807      2D
 1808              		.section	.data.flag_digit_1,"aw"
 1811              	flag_digit_1:
 1812 0000 01       		.byte	1
 1813              		.section	.data.start_cmd,"aw"
 1814              		.set	.LANCHOR18,. + 0
 1817              	start_cmd:
 1818 0000 02       		.byte	2
 1819              		.section	.data.stop_cmd,"aw"
 1820              		.set	.LANCHOR19,. + 0
 1823              	stop_cmd:
 1824 0000 03       		.byte	3
 1825              		.section	.data.tx1_buffer,"aw"
 1826              		.align	2
 1829              	tx1_buffer:
 1830 0000 61626364 		.ascii	"abcdef"
 1830      6566
 1831              		.section	.data.tx2_buffer,"aw"
 1832              		.align	2
 1835              	tx2_buffer:
 1836 0000 31323334 		.ascii	"123456789\000"
 1836      35363738 
 1836      3900
 1837              		.text
 1838              	.Letext0:
ARM GAS  /tmp/ccrM433n.s 			page 50


 1839              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1840              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 1841              		.file 5 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1842              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1843              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1844              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1845              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1846              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1847              		.file 11 "Core/Inc/tim.h"
 1848              		.file 12 "Core/Inc/usart.h"
 1849              		.file 13 "Core/Inc/buffer.h"
 1850              		.file 14 "Core/Inc/message.h"
 1851              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1852              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1853              		.file 17 "Core/Inc/gpio.h"
 1854              		.file 18 "Core/Inc/lcd16x2.h"
 1855              		.file 19 "<built-in>"
ARM GAS  /tmp/ccrM433n.s 			page 51


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccrM433n.s:18     .text.m_send_to_lcd:0000000000000000 $t
     /tmp/ccrM433n.s:26     .text.m_send_to_lcd:0000000000000000 m_send_to_lcd
     /tmp/ccrM433n.s:122    .text.m_send_to_lcd:0000000000000068 $d
     /tmp/ccrM433n.s:131    .text.lcd_display_task:0000000000000000 $t
     /tmp/ccrM433n.s:138    .text.lcd_display_task:0000000000000000 lcd_display_task
     /tmp/ccrM433n.s:177    .text.lcd_display_task:0000000000000026 $d
     /tmp/ccrM433n.s:181    .text.lcd_display_task:000000000000002a $t
     /tmp/ccrM433n.s:268    .text.lcd_display_task:000000000000009c $d
     /tmp/ccrM433n.s:280    .text.task_timer:0000000000000000 $t
     /tmp/ccrM433n.s:287    .text.task_timer:0000000000000000 task_timer
     /tmp/ccrM433n.s:386    .text.task_timer:0000000000000068 $d
     /tmp/ccrM433n.s:397    .text.key_read_task:0000000000000000 $t
     /tmp/ccrM433n.s:404    .text.key_read_task:0000000000000000 key_read_task
     /tmp/ccrM433n.s:522    .text.key_read_task:0000000000000080 $d
     /tmp/ccrM433n.s:531    .text.RS485_Send_Message:0000000000000000 $t
     /tmp/ccrM433n.s:538    .text.RS485_Send_Message:0000000000000000 RS485_Send_Message
     /tmp/ccrM433n.s:609    .text.RS485_Send_Message:0000000000000054 $d
     /tmp/ccrM433n.s:618    .text.RS485_Read_Message:0000000000000000 $t
     /tmp/ccrM433n.s:625    .text.RS485_Read_Message:0000000000000000 RS485_Read_Message
     /tmp/ccrM433n.s:742    .text.RS485_Read_Message:000000000000006c $d
     /tmp/ccrM433n.s:753    .text.main_task:0000000000000000 $t
     /tmp/ccrM433n.s:760    .text.main_task:0000000000000000 main_task
     /tmp/ccrM433n.s:788    .text.main_task:0000000000000018 $d
     /tmp/ccrM433n.s:796    .text.main_task:0000000000000020 $t
     /tmp/ccrM433n.s:872    .text.main_task:0000000000000080 $d
     /tmp/ccrM433n.s:878    .text.main_task:0000000000000098 $t
     /tmp/ccrM433n.s:1037   .text.main_task:0000000000000144 $d
     /tmp/ccrM433n.s:1048   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccrM433n.s:1055   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccrM433n.s:1082   .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccrM433n.s:1088   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccrM433n.s:1095   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccrM433n.s:1185   .text.HAL_UART_RxCpltCallback:0000000000000054 $d
     /tmp/ccrM433n.s:1194   .text.Error_Handler:0000000000000000 $t
     /tmp/ccrM433n.s:1201   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccrM433n.s:1233   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccrM433n.s:1240   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccrM433n.s:1388   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccrM433n.s:1394   .rodata.main.str1.4:0000000000000000 $d
     /tmp/ccrM433n.s:1404   .text.main:0000000000000000 $t
     /tmp/ccrM433n.s:1411   .text.main:0000000000000000 main
     /tmp/ccrM433n.s:1524   .text.main:000000000000008c $d
     /tmp/ccrM433n.s:1591   .bss.RX_msg:0000000000000000 RX_msg
     /tmp/ccrM433n.s:1598   .bss.TX_msg:0000000000000000 TX_msg
     /tmp/ccrM433n.s:1584   .bss.ID:0000000000000000 ID
     /tmp/ccrM433n.s:1678   .bss.event_buffer:0000000000000000 event_buffer
     /tmp/ccrM433n.s:1771   .bss.rx2_buffer:0000000000000000 rx2_buffer
     /tmp/ccrM433n.s:1764   .bss.rx1_buffer:0000000000000000 rx1_buffer
     /tmp/ccrM433n.s:1823   .data.stop_cmd:0000000000000000 stop_cmd
     /tmp/ccrM433n.s:1817   .data.start_cmd:0000000000000000 start_cmd
     /tmp/ccrM433n.s:1789   .bss.transmission_f:0000000000000000 transmission_f
     /tmp/ccrM433n.s:1777   .bss.rx_temp:0000000000000000 rx_temp
     /tmp/ccrM433n.s:1806   .data.digit_table:0000000000000000 digit_table
     /tmp/ccrM433n.s:1752   .bss.lcd_process:0000000000000000 lcd_process
     /tmp/ccrM433n.s:1638   .bss.data:0000000000000000 data
ARM GAS  /tmp/ccrM433n.s 			page 52


     /tmp/ccrM433n.s:1604   .bss.cmd:0000000000000000 cmd
     /tmp/ccrM433n.s:1660   .bss.digit2_update:0000000000000000 digit2_update
     /tmp/ccrM433n.s:1649   .bss.digit1_update:0000000000000000 digit1_update
     /tmp/ccrM433n.s:1746   .bss.lcd_digit1_f:0000000000000000 lcd_digit1_f
     /tmp/ccrM433n.s:1728   .bss.is_EN:0000000000000000 is_EN
     /tmp/ccrM433n.s:1655   .bss.digit2:0000000000000000 digit2
     /tmp/ccrM433n.s:1644   .bss.digit1:0000000000000000 digit1
     /tmp/ccrM433n.s:1758   .bss.num_slave:0000000000000000 num_slave
     /tmp/ccrM433n.s:1665   .bss.error:0000000000000000 error
     /tmp/ccrM433n.s:1671   .bss.event:0000000000000000 event
     /tmp/ccrM433n.s:1783   .bss.state:0000000000000000 state
     /tmp/ccrM433n.s:1740   .bss.key2_data:0000000000000000 key2_data
     /tmp/ccrM433n.s:1734   .bss.key1_data:0000000000000000 key1_data
     /tmp/ccrM433n.s:1799   .data.TX2_delay_val:0000000000000000 TX2_delay_val
     /tmp/ccrM433n.s:1632   .bss.d_timer_TX2:0000000000000000 d_timer_TX2
     /tmp/ccrM433n.s:1794   .data.TX1_delay_val:0000000000000000 TX1_delay_val
     /tmp/ccrM433n.s:1627   .bss.d_timer_TX1:0000000000000000 d_timer_TX1
     /tmp/ccrM433n.s:1610   .bss.d_timer_20ms:0000000000000000 d_timer_20ms
     /tmp/ccrM433n.s:1622   .bss.d_timer_50ms:0000000000000000 d_timer_50ms
     /tmp/ccrM433n.s:1616   .bss.d_timer_30ms:0000000000000000 d_timer_30ms
     /tmp/ccrM433n.s:1829   .data.tx1_buffer:0000000000000000 tx1_buffer
     /tmp/ccrM433n.s:1835   .data.tx2_buffer:0000000000000000 tx2_buffer
     /tmp/ccrM433n.s:1811   .data.flag_digit_1:0000000000000000 flag_digit_1
     /tmp/ccrM433n.s:1689   .bss.f_querry:0000000000000000 f_querry
     /tmp/ccrM433n.s:1717   .bss.f_timer_50ms:0000000000000000 f_timer_50ms
     /tmp/ccrM433n.s:1712   .bss.f_timer_30ms:0000000000000000 f_timer_30ms
     /tmp/ccrM433n.s:1706   .bss.f_timer_20ms:0000000000000000 f_timer_20ms
     /tmp/ccrM433n.s:1700   .bss.f_timer_10ms:0000000000000000 f_timer_10ms
     /tmp/ccrM433n.s:1694   .bss.f_seg_timer_500ms:0000000000000000 f_seg_timer_500ms
     /tmp/ccrM433n.s:1722   .bss.f_timer_TX:0000000000000000 f_timer_TX
     /tmp/ccrM433n.s:1683   .bss.f_busy:0000000000000000 f_busy
     /tmp/ccrM433n.s:1585   .bss.ID:0000000000000000 $d
     /tmp/ccrM433n.s:1587   .bss.RX_msg:0000000000000000 $d
     /tmp/ccrM433n.s:1594   .bss.TX_msg:0000000000000000 $d
     /tmp/ccrM433n.s:1605   .bss.cmd:0000000000000000 $d
     /tmp/ccrM433n.s:1611   .bss.d_timer_20ms:0000000000000000 $d
     /tmp/ccrM433n.s:1617   .bss.d_timer_30ms:0000000000000000 $d
     /tmp/ccrM433n.s:1623   .bss.d_timer_50ms:0000000000000000 $d
     /tmp/ccrM433n.s:1628   .bss.d_timer_TX1:0000000000000000 $d
     /tmp/ccrM433n.s:1633   .bss.d_timer_TX2:0000000000000000 $d
     /tmp/ccrM433n.s:1639   .bss.data:0000000000000000 $d
     /tmp/ccrM433n.s:1645   .bss.digit1:0000000000000000 $d
     /tmp/ccrM433n.s:1650   .bss.digit1_update:0000000000000000 $d
     /tmp/ccrM433n.s:1656   .bss.digit2:0000000000000000 $d
     /tmp/ccrM433n.s:1661   .bss.digit2_update:0000000000000000 $d
     /tmp/ccrM433n.s:1666   .bss.error:0000000000000000 $d
     /tmp/ccrM433n.s:1672   .bss.event:0000000000000000 $d
     /tmp/ccrM433n.s:1674   .bss.event_buffer:0000000000000000 $d
     /tmp/ccrM433n.s:1684   .bss.f_busy:0000000000000000 $d
     /tmp/ccrM433n.s:1690   .bss.f_querry:0000000000000000 $d
     /tmp/ccrM433n.s:1695   .bss.f_seg_timer_500ms:0000000000000000 $d
     /tmp/ccrM433n.s:1701   .bss.f_timer_10ms:0000000000000000 $d
     /tmp/ccrM433n.s:1707   .bss.f_timer_20ms:0000000000000000 $d
     /tmp/ccrM433n.s:1713   .bss.f_timer_30ms:0000000000000000 $d
     /tmp/ccrM433n.s:1718   .bss.f_timer_50ms:0000000000000000 $d
     /tmp/ccrM433n.s:1723   .bss.f_timer_TX:0000000000000000 $d
     /tmp/ccrM433n.s:1729   .bss.is_EN:0000000000000000 $d
ARM GAS  /tmp/ccrM433n.s 			page 53


     /tmp/ccrM433n.s:1735   .bss.key1_data:0000000000000000 $d
     /tmp/ccrM433n.s:1741   .bss.key2_data:0000000000000000 $d
     /tmp/ccrM433n.s:1747   .bss.lcd_digit1_f:0000000000000000 $d
     /tmp/ccrM433n.s:1753   .bss.lcd_process:0000000000000000 $d
     /tmp/ccrM433n.s:1759   .bss.num_slave:0000000000000000 $d
     /tmp/ccrM433n.s:1761   .bss.rx1_buffer:0000000000000000 $d
     /tmp/ccrM433n.s:1767   .bss.rx2_buffer:0000000000000000 $d
     /tmp/ccrM433n.s:1778   .bss.rx_temp:0000000000000000 $d
     /tmp/ccrM433n.s:1784   .bss.state:0000000000000000 $d
     /tmp/ccrM433n.s:1790   .bss.transmission_f:0000000000000000 $d
     /tmp/ccrM433n.s:1802   .data.digit_table:0000000000000000 $d
     /tmp/ccrM433n.s:1826   .data.tx1_buffer:0000000000000000 $d
     /tmp/ccrM433n.s:1832   .data.tx2_buffer:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
buffer_push
cal_checksum
HAL_UART_Transmit
huart4
buffer_to_message
check_checksum
buffer_pop
htim4
HAL_UART_Receive_IT
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_TIM4_Init
MX_UART4_Init
MX_UART5_Init
HAL_TIM_Base_Start_IT
lcd_init
lcd_clear
lcd_set_pos
lcd_write_string
